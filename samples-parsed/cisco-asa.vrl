#---
# Filename: cisco_asa_parser.vrl
# Purpose: Parse Cisco ASA syslog messages with high performance string operations
# Description: Extracts ASA severity, code, and message details from syslog format
#              using CPU-optimized string operations. Handles connection events,
#              deny actions, and command execution logs.
# Version: 1.0.1
# Changelog: |
#   ## [1.0.1] - 2025-01-01
#   - Fixed fallible operation handling for string operations
#   - Added proper null checks before using variables
#   ## [1.0.0] - 2025-01-01
#   - Initial implementation with string-based parsing
#   - Support for ASA-5, ASA-6, ASA-4 severity messages
#   - Connection and deny action parsing
# Copyright: © 2025 HyperSec Pty Ltd
# Licence: "HyperSec EULA © 2025"
# Env:
#   LOG_LEVEL: info
# Flow: >
#   Check msg field -> Extract ASA code -> Parse message content -> 
#   Extract IPs/ports -> Normalize fields -> Cleanup
#---

# Exit fast if no msg field
if !exists(.msg) {
  .parse_status = "no_msg_field"
} else {
  msg = string!(.msg)
  
  # Check for ASA pattern
  if contains(msg, "%ASA-") {
    # Extract ASA parts
    asa_parts = split(msg, "%ASA-")
    if length(asa_parts) > 1 {
      asa_content = string!(asa_parts[1])
      
      # Extract severity and code
      if contains(asa_content, "-") {
        dash_parts = split(asa_content, "-")
        if length(dash_parts) > 1 {
          .asa_severity = dash_parts[0]
          
          # Extract code and message
          dash_part_1 = string!(dash_parts[1])
          if contains(dash_part_1, ":") {
            code_msg_parts = split(dash_part_1, ":")
            if length(code_msg_parts) > 0 {
              .asa_code = code_msg_parts[0]
              
              # Get message content
              if length(code_msg_parts) > 1 {
                msg_content = string!(code_msg_parts[1])
                
                # Parse based on ASA code patterns
                if .asa_code == "111008" {
                  # User command execution
                  if contains(msg_content, "User '") && contains(msg_content, "' executed") {
                    user_parts = split(msg_content, "'")
                    if length(user_parts) > 1 {
                      .asa_user = user_parts[1]
                    }
                    if length(user_parts) > 3 {
                      .asa_command = user_parts[3]
                    }
                  }
                } else if .asa_code == "302013" || .asa_code == "302014" {
                  # Connection built/torn down
                  if contains(msg_content, "connection") {
                    .asa_action = "Built"
                    if contains(msg_content, "teardown") || contains(msg_content, "Teardown") {
                      .asa_action = "Teardown"
                    }
                    
                    # Extract connection ID
                    if contains(msg_content, "connection ") {
                      conn_parts = split(msg_content, "connection ")
                      if length(conn_parts) > 1 {
                        conn_part_1 = string!(conn_parts[1])
                        conn_id_parts = split(conn_part_1, " ")
                        if length(conn_id_parts) > 0 {
                          .asa_connection_id = conn_id_parts[0]
                        }
                      }
                    }
                    
                    # Extract protocol
                    if contains(msg_content, " TCP ") {
                      .asa_protocol = "TCP"
                    } else if contains(msg_content, " UDP ") {
                      .asa_protocol = "UDP"
                    } else if contains(msg_content, " ICMP ") {
                      .asa_protocol = "ICMP"
                    }
                    
                    # Extract IPs and ports for outside
                    if contains(msg_content, "outside:") {
                      outside_parts = split(msg_content, "outside:")
                      if length(outside_parts) > 1 {
                        outside_part_1 = string!(outside_parts[1])
                        outside_space_parts = split(outside_part_1, " ")
                        if length(outside_space_parts) > 0 {
                          outside_addr = string!(outside_space_parts[0])
                          if contains(outside_addr, "/") {
                            addr_parts = split(outside_addr, "/")
                            if length(addr_parts) > 0 {
                              .asa_outside_ip = addr_parts[0]
                            }
                            if length(addr_parts) > 1 {
                              .asa_outside_port = addr_parts[1]
                            }
                          }
                        }
                      }
                    }
                    
                    # Extract IPs and ports for inside
                    if contains(msg_content, "inside:") {
                      inside_parts = split(msg_content, "inside:")
                      if length(inside_parts) > 1 {
                        inside_part_1 = string!(inside_parts[1])
                        inside_space_parts = split(inside_part_1, " ")
                        if length(inside_space_parts) > 0 {
                          inside_addr = string!(inside_space_parts[0])
                          if contains(inside_addr, "/") {
                            addr_parts = split(inside_addr, "/")
                            if length(addr_parts) > 0 {
                              .asa_inside_ip = addr_parts[0]
                            }
                            if length(addr_parts) > 1 {
                              .asa_inside_port = addr_parts[1]
                            }
                          }
                        }
                      }
                    }
                  }
                } else if .asa_code == "106023" {
                  # Deny action
                  .asa_action = "Deny"
                  
                  # Extract protocol
                  if contains(msg_content, " tcp ") {
                    .asa_protocol = "tcp"
                  } else if contains(msg_content, " udp ") {
                    .asa_protocol = "udp"
                  } else if contains(msg_content, " icmp ") {
                    .asa_protocol = "icmp"
                  }
                  
                  # Extract source
                  if contains(msg_content, " src ") {
                    src_parts = split(msg_content, " src ")
                    if length(src_parts) > 1 {
                      src_part_1 = string!(src_parts[1])
                      src_space_parts = split(src_part_1, " ")
                      if length(src_space_parts) > 0 {
                        src_info = string!(src_space_parts[0])
                        if contains(src_info, ":") {
                          zone_addr = split(src_info, ":")
                          if length(zone_addr) > 0 {
                            .asa_src_zone = zone_addr[0]
                          }
                          if length(zone_addr) > 1 {
                            zone_addr_1 = string!(zone_addr[1])
                            if contains(zone_addr_1, "/") {
                              ip_port = split(zone_addr_1, "/")
                              if length(ip_port) > 0 {
                                .asa_src_ip = ip_port[0]
                              }
                              if length(ip_port) > 1 {
                                .asa_src_port = ip_port[1]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  
                  # Extract destination
                  if contains(msg_content, " dst ") {
                    dst_parts = split(msg_content, " dst ")
                    if length(dst_parts) > 1 {
                      dst_part_1 = string!(dst_parts[1])
                      dst_space_parts = split(dst_part_1, " ")
                      if length(dst_space_parts) > 0 {
                        dst_info = string!(dst_space_parts[0])
                        if contains(dst_info, ":") {
                          zone_addr = split(dst_info, ":")
                          if length(zone_addr) > 0 {
                            .asa_dst_zone = zone_addr[0]
                          }
                          if length(zone_addr) > 1 {
                            zone_addr_1 = string!(zone_addr[1])
                            if contains(zone_addr_1, "/") {
                              ip_port = split(zone_addr_1, "/")
                              if length(ip_port) > 0 {
                                .asa_dst_ip = ip_port[0]
                              }
                              if length(ip_port) > 1 {
                                .asa_dst_port = ip_port[1]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  
                  # Extract ACL name
                  if contains(msg_content, "access-group \"") {
                    acl_parts = split(msg_content, "access-group \"")
                    if length(acl_parts) > 1 {
                      acl_part_1 = string!(acl_parts[1])
                      acl_name_parts = split(acl_part_1, "\"")
                      if length(acl_name_parts) > 0 {
                        .asa_acl_name = acl_name_parts[0]
                      }
                    }
                  }
                }
                
                # Store full message
                .asa_message = msg_content
              }
            }
          }
        }
      }
    }
  }
  
  # Use pre-parsed syslog fields if available
  if exists(.syslog) {
    if exists(.syslog.action) {
      .asa_action = string!(.syslog.action)
    }
    if exists(.syslog.protocol) {
      .asa_protocol = string!(.syslog.protocol)
    }
    if exists(.syslog.src_ip) {
      .asa_src_ip = string!(.syslog.src_ip)
    }
    if exists(.syslog.src_port) {
      .asa_src_port = string!(.syslog.src_port)
    }
    if exists(.syslog.dst_ip) {
      .asa_dst_ip = string!(.syslog.dst_ip)
    }
    if exists(.syslog.dst_port) {
      .asa_dst_port = string!(.syslog.dst_port)
    }
    if exists(.syslog.connection_id) {
      .asa_connection_id = string!(.syslog.connection_id)
    }
    if exists(.syslog.src_zone) {
      .asa_src_zone = string!(.syslog.src_zone)
    }
    if exists(.syslog.dst_zone) {
      .asa_dst_zone = string!(.syslog.dst_zone)
    }
    if exists(.syslog.acl_name) {
      .asa_acl_name = string!(.syslog.acl_name)
    }
  }
}

# Normalize fields at the end
if exists(.asa_action) {
  .asa_action_normalized = downcase(string!(.asa_action))
}
if exists(.asa_protocol) {
  .asa_protocol_normalized = upcase(string!(.asa_protocol))
}
if exists(.asa_src_zone) {
  .asa_src_zone_normalized = downcase(string!(.asa_src_zone))
}
if exists(.asa_dst_zone) {
  .asa_dst_zone_normalized = downcase(string!(.asa_dst_zone))
}

# Set parse status
if exists(.asa_code) {
  .parse_status = "success"
} else if exists(.syslog) {
  .parse_status = "used_preparsed"
} else {
  .parse_status = "no_asa_pattern"
}

# Return the event
.