{
  "status": "success",
  "parser": {
    "name": "llm_generated_v2",
    "strategy": "llm_analysis",
    "vrl_code": "#---\n# Filename: cisco_asa_parser.vrl\n# Purpose: Parse Cisco ASA syslog messages with high performance string operations\n# Description: Extracts ASA severity, code, and message details from syslog format\n#              using CPU-optimized string operations. Handles connection events,\n#              deny actions, and command execution logs.\n# Version: 1.0.1\n# Changelog: |\n#   ## [1.0.1] - 2025-01-01\n#   - Fixed fallible operation handling for string operations\n#   - Added proper null checks before using variables\n#   ## [1.0.0] - 2025-01-01\n#   - Initial implementation with string-based parsing\n#   - Support for ASA-5, ASA-6, ASA-4 severity messages\n#   - Connection and deny action parsing\n# Copyright: \u00a9 2025 HyperSec Pty Ltd\n# Licence: \"HyperSec EULA \u00a9 2025\"\n# Env:\n#   LOG_LEVEL: info\n# Flow: >\n#   Check msg field -> Extract ASA code -> Parse message content -> \n#   Extract IPs/ports -> Normalize fields -> Cleanup\n#---\n\n# Exit fast if no msg field\nif !exists(.msg) {\n  .parse_status = \"no_msg_field\"\n} else {\n  msg = string!(.msg)\n  \n  # Check for ASA pattern\n  if contains(msg, \"%ASA-\") {\n    # Extract ASA parts\n    asa_parts = split(msg, \"%ASA-\")\n    if length(asa_parts) > 1 {\n      asa_content = string!(asa_parts[1])\n      \n      # Extract severity and code\n      if contains(asa_content, \"-\") {\n        dash_parts = split(asa_content, \"-\")\n        if length(dash_parts) > 1 {\n          .asa_severity = dash_parts[0]\n          \n          # Extract code and message\n          dash_part_1 = string!(dash_parts[1])\n          if contains(dash_part_1, \":\") {\n            code_msg_parts = split(dash_part_1, \":\")\n            if length(code_msg_parts) > 0 {\n              .asa_code = code_msg_parts[0]\n              \n              # Get message content\n              if length(code_msg_parts) > 1 {\n                msg_content = string!(code_msg_parts[1])\n                \n                # Parse based on ASA code patterns\n                if .asa_code == \"111008\" {\n                  # User command execution\n                  if contains(msg_content, \"User '\") && contains(msg_content, \"' executed\") {\n                    user_parts = split(msg_content, \"'\")\n                    if length(user_parts) > 1 {\n                      .asa_user = user_parts[1]\n                    }\n                    if length(user_parts) > 3 {\n                      .asa_command = user_parts[3]\n                    }\n                  }\n                } else if .asa_code == \"302013\" || .asa_code == \"302014\" {\n                  # Connection built/torn down\n                  if contains(msg_content, \"connection\") {\n                    .asa_action = \"Built\"\n                    if contains(msg_content, \"teardown\") || contains(msg_content, \"Teardown\") {\n                      .asa_action = \"Teardown\"\n                    }\n                    \n                    # Extract connection ID\n                    if contains(msg_content, \"connection \") {\n                      conn_parts = split(msg_content, \"connection \")\n                      if length(conn_parts) > 1 {\n                        conn_part_1 = string!(conn_parts[1])\n                        conn_id_parts = split(conn_part_1, \" \")\n                        if length(conn_id_parts) > 0 {\n                          .asa_connection_id = conn_id_parts[0]\n                        }\n                      }\n                    }\n                    \n                    # Extract protocol\n                    if contains(msg_content, \" TCP \") {\n                      .asa_protocol = \"TCP\"\n                    } else if contains(msg_content, \" UDP \") {\n                      .asa_protocol = \"UDP\"\n                    } else if contains(msg_content, \" ICMP \") {\n                      .asa_protocol = \"ICMP\"\n                    }\n                    \n                    # Extract IPs and ports for outside\n                    if contains(msg_content, \"outside:\") {\n                      outside_parts = split(msg_content, \"outside:\")\n                      if length(outside_parts) > 1 {\n                        outside_part_1 = string!(outside_parts[1])\n                        outside_space_parts = split(outside_part_1, \" \")\n                        if length(outside_space_parts) > 0 {\n                          outside_addr = string!(outside_space_parts[0])\n                          if contains(outside_addr, \"/\") {\n                            addr_parts = split(outside_addr, \"/\")\n                            if length(addr_parts) > 0 {\n                              .asa_outside_ip = addr_parts[0]\n                            }\n                            if length(addr_parts) > 1 {\n                              .asa_outside_port = addr_parts[1]\n                            }\n                          }\n                        }\n                      }\n                    }\n                    \n                    # Extract IPs and ports for inside\n                    if contains(msg_content, \"inside:\") {\n                      inside_parts = split(msg_content, \"inside:\")\n                      if length(inside_parts) > 1 {\n                        inside_part_1 = string!(inside_parts[1])\n                        inside_space_parts = split(inside_part_1, \" \")\n                        if length(inside_space_parts) > 0 {\n                          inside_addr = string!(inside_space_parts[0])\n                          if contains(inside_addr, \"/\") {\n                            addr_parts = split(inside_addr, \"/\")\n                            if length(addr_parts) > 0 {\n                              .asa_inside_ip = addr_parts[0]\n                            }\n                            if length(addr_parts) > 1 {\n                              .asa_inside_port = addr_parts[1]\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else if .asa_code == \"106023\" {\n                  # Deny action\n                  .asa_action = \"Deny\"\n                  \n                  # Extract protocol\n                  if contains(msg_content, \" tcp \") {\n                    .asa_protocol = \"tcp\"\n                  } else if contains(msg_content, \" udp \") {\n                    .asa_protocol = \"udp\"\n                  } else if contains(msg_content, \" icmp \") {\n                    .asa_protocol = \"icmp\"\n                  }\n                  \n                  # Extract source\n                  if contains(msg_content, \" src \") {\n                    src_parts = split(msg_content, \" src \")\n                    if length(src_parts) > 1 {\n                      src_part_1 = string!(src_parts[1])\n                      src_space_parts = split(src_part_1, \" \")\n                      if length(src_space_parts) > 0 {\n                        src_info = string!(src_space_parts[0])\n                        if contains(src_info, \":\") {\n                          zone_addr = split(src_info, \":\")\n                          if length(zone_addr) > 0 {\n                            .asa_src_zone = zone_addr[0]\n                          }\n                          if length(zone_addr) > 1 {\n                            zone_addr_1 = string!(zone_addr[1])\n                            if contains(zone_addr_1, \"/\") {\n                              ip_port = split(zone_addr_1, \"/\")\n                              if length(ip_port) > 0 {\n                                .asa_src_ip = ip_port[0]\n                              }\n                              if length(ip_port) > 1 {\n                                .asa_src_port = ip_port[1]\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                  \n                  # Extract destination\n                  if contains(msg_content, \" dst \") {\n                    dst_parts = split(msg_content, \" dst \")\n                    if length(dst_parts) > 1 {\n                      dst_part_1 = string!(dst_parts[1])\n                      dst_space_parts = split(dst_part_1, \" \")\n                      if length(dst_space_parts) > 0 {\n                        dst_info = string!(dst_space_parts[0])\n                        if contains(dst_info, \":\") {\n                          zone_addr = split(dst_info, \":\")\n                          if length(zone_addr) > 0 {\n                            .asa_dst_zone = zone_addr[0]\n                          }\n                          if length(zone_addr) > 1 {\n                            zone_addr_1 = string!(zone_addr[1])\n                            if contains(zone_addr_1, \"/\") {\n                              ip_port = split(zone_addr_1, \"/\")\n                              if length(ip_port) > 0 {\n                                .asa_dst_ip = ip_port[0]\n                              }\n                              if length(ip_port) > 1 {\n                                .asa_dst_port = ip_port[1]\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                  \n                  # Extract ACL name\n                  if contains(msg_content, \"access-group \\\"\") {\n                    acl_parts = split(msg_content, \"access-group \\\"\")\n                    if length(acl_parts) > 1 {\n                      acl_part_1 = string!(acl_parts[1])\n                      acl_name_parts = split(acl_part_1, \"\\\"\")\n                      if length(acl_name_parts) > 0 {\n                        .asa_acl_name = acl_name_parts[0]\n                      }\n                    }\n                  }\n                }\n                \n                # Store full message\n                .asa_message = msg_content\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  \n  # Use pre-parsed syslog fields if available\n  if exists(.syslog) {\n    if exists(.syslog.action) {\n      .asa_action = string!(.syslog.action)\n    }\n    if exists(.syslog.protocol) {\n      .asa_protocol = string!(.syslog.protocol)\n    }\n    if exists(.syslog.src_ip) {\n      .asa_src_ip = string!(.syslog.src_ip)\n    }\n    if exists(.syslog.src_port) {\n      .asa_src_port = string!(.syslog.src_port)\n    }\n    if exists(.syslog.dst_ip) {\n      .asa_dst_ip = string!(.syslog.dst_ip)\n    }\n    if exists(.syslog.dst_port) {\n      .asa_dst_port = string!(.syslog.dst_port)\n    }\n    if exists(.syslog.connection_id) {\n      .asa_connection_id = string!(.syslog.connection_id)\n    }\n    if exists(.syslog.src_zone) {\n      .asa_src_zone = string!(.syslog.src_zone)\n    }\n    if exists(.syslog.dst_zone) {\n      .asa_dst_zone = string!(.syslog.dst_zone)\n    }\n    if exists(.syslog.acl_name) {\n      .asa_acl_name = string!(.syslog.acl_name)\n    }\n  }\n}\n\n# Normalize fields at the end\nif exists(.asa_action) {\n  .asa_action_normalized = downcase(string!(.asa_action))\n}\nif exists(.asa_protocol) {\n  .asa_protocol_normalized = upcase(string!(.asa_protocol))\n}\nif exists(.asa_src_zone) {\n  .asa_src_zone_normalized = downcase(string!(.asa_src_zone))\n}\nif exists(.asa_dst_zone) {\n  .asa_dst_zone_normalized = downcase(string!(.asa_dst_zone))\n}\n\n# Set parse status\nif exists(.asa_code) {\n  .parse_status = \"success\"\n} else if exists(.syslog) {\n  .parse_status = \"used_preparsed\"\n} else {\n  .parse_status = \"no_asa_pattern\"\n}\n\n# Return the event\n.",
    "extracted_fields": [
      "parse_status"
    ],
    "validation": {
      "pyvrl_passed": true,
      "vector_passed": true,
      "errors": []
    }
  },
  "performance": {
    "events_per_second": 2081.908681019313,
    "cpu_percent": 0.2222222222222222,
    "memory_mb": 65.4849609375,
    "events_per_cpu_percent": 9368,
    "p99_latency_ms": 48.032846450805664,
    "performance_tier": "Tier S (Exceptional)",
    "vrl_performance_index": 93680
  },
  "system_info": {
    "cpu_benchmark_multiplier": 10.0,
    "vector_startup_time": 0.5014586448669434,
    "cpu_model": "AMD Ryzen 9 5900X 12-Core Processor",
    "cpu_cores": 16
  },
  "metadata": {
    "timestamp": "2025-08-28T16:55:53.179384",
    "sample_file": "samples/cisco-asa.ndjson",
    "sample_count": 3,
    "iterations_tested": 2
  }
}