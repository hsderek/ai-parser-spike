[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "dfe-ai-parser-vrl"
version = "0.2.0"
description = "AI-powered Vector Remap Language (VRL) parser generator for HyperSec Data Fusion Engine"
authors = [
    {name = "HyperSec DFE Team", email = "dev@hypersec.com"}
]
readme = "README.md"
license = {text = "Proprietary"}
requires-python = ">=3.11"
keywords = ["vrl", "vector", "log-parsing", "ai", "llm", "hypersec", "dfe"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]

dependencies = [
    "litellm>=1.40.0",
    "loguru>=0.7.0",
    "pyyaml>=6.0",
    "pyvrl>=0.0.2",
    "python-dotenv>=1.0.0",
    "ijson>=3.2.0", # Streaming JSON parser
    "dask[complete]>=2024.1.0", # Parallel data processing
    "regex>=2023.0.0", # Enhanced regex performance
    "jinja2>=3.1.6",
    "psutil>=7.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
]

test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
]

[project.scripts]
dfe-vrl-generate = "scripts.generate_vrl:main"
dfe-vrl-test = "scripts.test_vrl:main"

[project.urls]
Homepage = "https://github.com/hsderek/ai-parser-spike"
Repository = "https://github.com/hsderek/ai-parser-spike"
Issues = "https://github.com/hsderek/ai-parser-spike/issues"

[tool.setuptools.packages.find]
where = ["src"]
include = ["dfe_ai_parser_vrl*", "dfe_ai_pre_tokenizer*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.csv"]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | deprecated
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py39"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long
    "B008",  # do not perform function calls in argument defaults
]
exclude = [
    ".venv",
    "deprecated",
    "build",
    "dist",
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
exclude = [
    "deprecated/",
    "tests/",
]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
addopts = "-ra -q --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["dfe_ai_parser_vrl"]
omit = [
    "*/tests/*",
    "*/deprecated/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
