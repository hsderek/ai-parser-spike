# Early exit optimization - skip processing if no message field
if !exists(.message) && !exists(.msg) && !exists(.log) {
    # Skip expensive processing for events without core message fields
    .parser_skipped = true
}
#---
# Filename: generated_parser.vrl
# Purpose: AI-generated VRL parser for structured log data
# Description: Optimized VRL transforms for extracting high-value fields
#              Generated using CPU-efficient string operations per VECTOR-VRL guidelines
# Version: 1.0.0
# Changelog: |
#   ## [1.0.0] - 2025-08-26
#   - Initial AI-generated parser
# Copyright: Â© 2025 HyperSec Pty Ltd
# Licence: "HyperSec EULA Â© 2025"
# Flow: >
#   input -> field_extraction -> type_conversion -> cleanup -> output
#---

# Extract user_agent as string
if exists(.user_agent) {
    .user_agent = string!(.user_agent)
}
# Extract status_code as integer with error handling
if exists(.status_code) {
    .status_code, .status_code_err = to_int(.status_code)
    if .status_code_err != null {
        del(.status_code_err)
        .status_code = 0
    }
}
# Extract error_code as string
if exists(.error_code) {
    .error_code = string!(.error_code)
}
# Extract timestamp as timestamp with fallback parsing
if exists(.timestamp) {
    .timestamp, .timestamp_err = parse_timestamp(string!(.timestamp), format: "%Y-%m-%dT%H:%M:%S%.3fZ")
    if .timestamp_err != null {
        .timestamp, .timestamp_err = parse_timestamp(string!(.timestamp), format: "%Y-%m-%d %H:%M:%S")
        if .timestamp_err != null {
            del(.timestamp_err)
            .timestamp = now()
        }
    }
}
# Extract ip_address as IP address using fast string validation
if exists(.ip_address) {
    .ip_address_raw = string!(.ip_address)
    # Fast IP validation using string operations (not regex)
    if contains(.ip_address_raw, ".") && length(.ip_address_raw) >= 7 && length(.ip_address_raw) <= 15 {
        .ip_address = .ip_address_raw
    }
    del(.ip_address_raw)
}
# Extract server as string
if exists(.server) {
    .server = string!(.server)
}
# Extract logout_reason as string
if exists(.logout_reason) {
    .logout_reason = string!(.logout_reason)
}
# Extract user_id as integer with error handling
if exists(.user_id) {
    .user_id, .user_id_err = to_int(.user_id)
    if .user_id_err != null {
        del(.user_id_err)
        .user_id = 0
    }
}
# Extract hostname as string
if exists(.hostname) {
    .hostname = string!(.hostname)
}
# Extract message field - high value string field
if exists(.message) {
    .message = string!(.message)
}
# Extract response_time_ms as integer with error handling
if exists(.response_time_ms) {
    .response_time_ms, .response_time_ms_err = to_int(.response_time_ms)
    if .response_time_ms_err != null {
        del(.response_time_ms_err)
        .response_time_ms = 0
    }
}
# Extract level as string
if exists(.level) {
    .level = string!(.level)
}

# Cleanup temporary fields and optimize memory usage
# Remove any remaining error fields
del(..*_err)

# Performance optimization: fields processed = 12
# Estimated CPU cost: 7 low + 5 medium + 0 high cost operations

# Memory optimization - remove large temporary fields early
if exists(.raw_data) && length(.raw_data) > 1000 {
    del(.raw_data)
}
