{
  "status": "success",
  "message": "Successfully generated VRL parser with 12 fields",
  "data": {
    "vrl_code": "# Early exit optimization - skip processing if no message field\nif !exists(.message) && !exists(.msg) && !exists(.log) {\n    # Skip expensive processing for events without core message fields\n    .parser_skipped = true\n}\n#---\n# Filename: generated_parser.vrl\n# Purpose: AI-generated VRL parser for structured log data\n# Description: Optimized VRL transforms for extracting high-value fields\n#              Generated using CPU-efficient string operations per VECTOR-VRL guidelines\n# Version: 1.0.0\n# Changelog: |\n#   ## [1.0.0] - 2025-08-26\n#   - Initial AI-generated parser\n# Copyright: \u00a9 2025 HyperSec Pty Ltd\n# Licence: \"HyperSec EULA \u00a9 2025\"\n# Flow: >\n#   input -> field_extraction -> type_conversion -> cleanup -> output\n#---\n\n# Extract user_agent as string\nif exists(.user_agent) {\n    .user_agent = string!(.user_agent)\n}\n# Extract status_code as integer with error handling\nif exists(.status_code) {\n    .status_code, .status_code_err = to_int(.status_code)\n    if .status_code_err != null {\n        del(.status_code_err)\n        .status_code = 0\n    }\n}\n# Extract error_code as string\nif exists(.error_code) {\n    .error_code = string!(.error_code)\n}\n# Extract timestamp as timestamp with fallback parsing\nif exists(.timestamp) {\n    .timestamp, .timestamp_err = parse_timestamp(string!(.timestamp), format: \"%Y-%m-%dT%H:%M:%S%.3fZ\")\n    if .timestamp_err != null {\n        .timestamp, .timestamp_err = parse_timestamp(string!(.timestamp), format: \"%Y-%m-%d %H:%M:%S\")\n        if .timestamp_err != null {\n            del(.timestamp_err)\n            .timestamp = now()\n        }\n    }\n}\n# Extract ip_address as IP address using fast string validation\nif exists(.ip_address) {\n    .ip_address_raw = string!(.ip_address)\n    # Fast IP validation using string operations (not regex)\n    if contains(.ip_address_raw, \".\") && length(.ip_address_raw) >= 7 && length(.ip_address_raw) <= 15 {\n        .ip_address = .ip_address_raw\n    }\n    del(.ip_address_raw)\n}\n# Extract server as string\nif exists(.server) {\n    .server = string!(.server)\n}\n# Extract logout_reason as string\nif exists(.logout_reason) {\n    .logout_reason = string!(.logout_reason)\n}\n# Extract user_id as integer with error handling\nif exists(.user_id) {\n    .user_id, .user_id_err = to_int(.user_id)\n    if .user_id_err != null {\n        del(.user_id_err)\n        .user_id = 0\n    }\n}\n# Extract hostname as string\nif exists(.hostname) {\n    .hostname = string!(.hostname)\n}\n# Extract message field - high value string field\nif exists(.message) {\n    .message = string!(.message)\n}\n# Extract response_time_ms as integer with error handling\nif exists(.response_time_ms) {\n    .response_time_ms, .response_time_ms_err = to_int(.response_time_ms)\n    if .response_time_ms_err != null {\n        del(.response_time_ms_err)\n        .response_time_ms = 0\n    }\n}\n# Extract level as string\nif exists(.level) {\n    .level = string!(.level)\n}\n\n# Cleanup temporary fields and optimize memory usage\n# Remove any remaining error fields\ndel(..*_err)\n\n# Performance optimization: fields processed = 12\n# Estimated CPU cost: 7 low + 5 medium + 0 high cost operations\n\n# Memory optimization - remove large temporary fields early\nif exists(.raw_data) && length(.raw_data) > 1000 {\n    del(.raw_data)\n}\n",
    "fields": [
      {
        "name": "user_agent",
        "type": "string",
        "description": "High-value string field appearing in 1 samples",
        "cpu_cost": "low",
        "confidence": 1.0,
        "sample_values": [
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
        ],
        "parser_type": "string",
        "is_high_value": true
      },
      {
        "name": "status_code",
        "type": "int64",
        "description": "High-value int64 field appearing in 2 samples",
        "cpu_cost": "medium",
        "confidence": 1.0,
        "sample_values": [
          "200",
          "200"
        ],
        "parser_type": "string",
        "is_high_value": true
      },
      {
        "name": "error_code",
        "type": "string",
        "description": "High-value string field appearing in 3 samples",
        "cpu_cost": "low",
        "confidence": 1.0,
        "sample_values": [
          "DB_TIMEOUT",
          "INSUFFICIENT_FUNDS",
          "CERT_EXPIRED"
        ],
        "parser_type": "string",
        "is_high_value": true
      },
      {
        "name": "timestamp",
        "type": "datetime",
        "description": "High-value datetime field appearing in 10 samples",
        "cpu_cost": "medium",
        "confidence": 1.0,
        "sample_values": [
          "2024-08-26T10:00:01.123Z",
          "2024-08-26T10:00:02.456Z",
          "2024-08-26T10:00:03.789Z",
          "2024-08-26T10:00:04.012Z",
          "2024-08-26T10:00:05.345Z"
        ],
        "parser_type": "string",
        "is_high_value": true
      },
      {
        "name": "ip_address",
        "type": "ipv4",
        "description": "High-value ipv4 field appearing in 4 samples",
        "cpu_cost": "medium",
        "confidence": 1.0,
        "sample_values": [
          "192.168.1.100",
          "10.0.1.50",
          "203.0.113.45",
          "192.168.1.100"
        ],
        "parser_type": "string",
        "is_high_value": true
      },
      {
        "name": "server",
        "type": "string",
        "description": "High-value string field appearing in 1 samples",
        "cpu_cost": "low",
        "confidence": 1.0,
        "sample_values": [
          "db-01.internal"
        ],
        "parser_type": "string",
        "is_high_value": true
      },
      {
        "name": "logout_reason",
        "type": "string",
        "description": "High-value string field appearing in 1 samples",
        "cpu_cost": "low",
        "confidence": 1.0,
        "sample_values": [
          "user_initiated"
        ],
        "parser_type": "string",
        "is_high_value": true
      },
      {
        "name": "user_id",
        "type": "int64",
        "description": "High-value int64 field appearing in 5 samples",
        "cpu_cost": "medium",
        "confidence": 1.0,
        "sample_values": [
          "12345",
          "67890",
          "12345",
          "54321",
          "12345"
        ],
        "parser_type": "string",
        "is_high_value": true
      },
      {
        "name": "hostname",
        "type": "string",
        "description": "High-value string field appearing in 2 samples",
        "cpu_cost": "low",
        "confidence": 1.0,
        "sample_values": [
          "web-server-01",
          "api.external-service.com"
        ],
        "parser_type": "string",
        "is_high_value": true
      },
      {
        "name": "message",
        "type": "string",
        "description": "High-value string field appearing in 10 samples",
        "cpu_cost": "low",
        "confidence": 1.0,
        "sample_values": [
          "User authentication successful for user john.doe@example.com",
          "Database connection timeout after 30 seconds",
          "Memory usage above 85% threshold",
          "API request processed successfully",
          "Cache hit for user profile data"
        ],
        "parser_type": "string",
        "is_high_value": true
      },
      {
        "name": "response_time_ms",
        "type": "int64",
        "description": "High-value int64 field appearing in 3 samples",
        "cpu_cost": "medium",
        "confidence": 1.0,
        "sample_values": [
          "45",
          "30000",
          "120"
        ],
        "parser_type": "string",
        "is_high_value": true
      },
      {
        "name": "level",
        "type": "string",
        "description": "High-value string field appearing in 10 samples",
        "cpu_cost": "low",
        "confidence": 1.0,
        "sample_values": [
          "INFO",
          "ERROR",
          "WARN",
          "INFO",
          "DEBUG"
        ],
        "parser_type": "string",
        "is_high_value": true
      }
    ],
    "data_source": {
      "name": "Application Logging (General Web Application)",
      "confidence": 0.95,
      "description": "This appears to be structured application logging data from a web application due to several key indicators: presence of standard logging levels (INFO, ERROR, WARN, DEBUG), web-specific fields (session_id, user_agent, response_time_ms, status_code), authentication events, and rich context data. The structured JSON format and combination of system metrics, user events, and API interactions is typical of modern application logging frameworks.",
      "common_fields": [
        "timestamp",
        "level",
        "message",
        "user_id",
        "session_id",
        "ip_address",
        "user_agent",
        "status_code",
        "response_time_ms",
        "endpoint",
        "method",
        "request_id",
        "hostname"
      ],
      "known_parsers": [
        "logstash",
        "fluentd",
        "winston",
        "log4j",
        "python-logging",
        "bunyan",
        "pino",
        "elastic-filebeat",
        "NLog",
        "Serilog"
      ]
    },
    "performance_metrics": {},
    "summary": {
      "total_fields": 12,
      "high_value_fields": 12,
      "low_cpu_cost_fields": 7,
      "medium_cpu_cost_fields": 5,
      "high_cpu_cost_fields": 0
    }
  }
}