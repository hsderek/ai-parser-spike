2025-08-28T18:44:03.318016Z INFO     vrl_testing_loop_clean:_setup_logging:152 - VRL Testing Pipeline logging initialized
2025-08-28T18:44:03.318365Z INFO     vrl_testing_loop_clean:_setup_logging:153 - Log file: logs/vrl_pipeline_20250828_184403.log
2025-08-28T18:44:03.318504Z INFO     vrl_testing_loop_clean:_setup_logging:154 - Sample file: samples/large/ssh-real.ndjson
2025-08-28T18:44:03.318626Z INFO     vrl_testing_loop_clean:_setup_logging:155 - Output directory: samples-parsed
2025-08-28T18:44:03.318737Z INFO     vrl_testing_loop_clean:_setup_logging:156 - External configs: external
2025-08-28T18:44:03.318802Z INFO     vrl_testing_loop_clean:_setup_logging:157 - Loaded configs: ['vector_vrl_prompt', 'parser_prompts', 'type_maps']
2025-08-28T18:44:20.758647Z INFO     vrl_testing_loop_clean:__init__:113 - Benchmarking local CPU performance...
2025-08-28T18:44:20.763258Z INFO     vrl_testing_loop_clean:__init__:115 - CPU benchmark multiplier: 10.00x
2025-08-28T18:44:20.763495Z INFO     vrl_testing_loop_clean:__init__:118 - Measuring Vector CLI startup time...
2025-08-28T18:44:21.266243Z INFO     vrl_testing_loop_clean:__init__:120 - Vector startup time: 0.50s
2025-08-28T18:44:21.266480Z INFO     vrl_testing_loop_clean:_log_external_configs_summary:1067 - 📋 EXTERNAL CONFIGS SUMMARY (K8s deployed):
2025-08-28T18:44:21.266673Z INFO     vrl_testing_loop_clean:_log_external_configs_summary:1074 -    🎯 vector-vrl-system.md: v1.3.0...
2025-08-28T18:44:21.266755Z INFO     vrl_testing_loop_clean:_log_external_configs_summary:1075 -       Contains: Performance tiers, string ops, Vector 0.49.0 config
2025-08-28T18:44:21.266820Z INFO     vrl_testing_loop_clean:_log_external_configs_summary:1079 -    🔧 parser-system-prompts.md: 10690 chars of project overrides
2025-08-28T18:44:21.266877Z INFO     vrl_testing_loop_clean:_log_external_configs_summary:1085 -    📊 type_maps.csv: 24 field mappings for product evolution
2025-08-28T18:44:21.266943Z INFO     vrl_testing_loop_clean:_log_external_configs_summary:1087 -    💡 These configs are retained for persistent LLM context
2025-08-28T18:44:21.267823Z INFO     __main__:quick_iteration_test:85 - 🎯 Starting VRL generation with all optimizations...
2025-08-28T18:44:21.930636Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1201 - 🤖 Starting automated LLM VRL generation
2025-08-28T18:44:21.931216Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1202 - Provider: anthropic, Max iterations: 10
2025-08-28T18:44:21.943071Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1210 - 🔧 Optimizing samples with pre-tokenizer...
2025-08-28T18:44:22.475859Z INFO     pre_tokenizer.enhanced_optimizer:smart_sample_selection:132 - Found 1 distinct patterns in 655147 samples
2025-08-28T18:44:30.932769Z SUCCESS  pre_tokenizer.enhanced_optimizer:smart_sample_selection:172 - Selected 3 samples covering 1 patterns
2025-08-28T18:44:31.154826Z INFO     pre_tokenizer.pre_tokenizer:__init__:41 - Initialized PreTokenizer for claude-3-opus-20240229 with 30,000 max tokens
2025-08-28T18:44:31.155481Z INFO     pre_tokenizer.pre_tokenizer:optimize_samples:101 - Optimizing 3 samples for 30,000 tokens
2025-08-28T18:44:31.156214Z INFO     pre_tokenizer.pre_tokenizer:optimize_samples:116 - Reduced to 3 unique samples from 3
2025-08-28T18:44:31.156418Z INFO     pre_tokenizer.pre_tokenizer:optimize_samples:117 - Pattern distribution: {'auth': 1}
2025-08-28T18:44:31.158494Z SUCCESS  pre_tokenizer.pre_tokenizer:optimize_samples:190 - Selected 3 samples using 1,770 tokens
2025-08-28T18:44:31.158591Z INFO     pre_tokenizer.pre_tokenizer:optimize_samples:191 - Pattern coverage: 100.0%
2025-08-28T18:44:31.158673Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1241 - 📊 Sample optimization: 655147 → 3 samples
2025-08-28T18:44:31.158774Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1242 - 📊 Token usage: 1,770 tokens
2025-08-28T18:44:31.158869Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1243 - 📊 Pattern coverage: 100.0%
2025-08-28T18:44:31.200660Z INFO     llm_iterative_session:_init_anthropic:433 - 🔍 Auto-detecting latest Anthropic model...
2025-08-28T18:44:31.200858Z INFO     llm_iterative_session:_detect_best_anthropic_model:140 - 🔍 Querying Anthropic API for available models...
2025-08-28T18:44:31.520430Z INFO     llm_iterative_session:_detect_best_anthropic_model:166 - Available Anthropic models: ['claude-opus-4-1-20250805', 'claude-opus-4-20250514', 'claude-sonnet-4-20250514', 'claude-3-7-sonnet-20250219', 'claude-3-5-sonnet-20241022']...
2025-08-28T18:44:31.520612Z INFO     llm_iterative_session:_detect_best_anthropic_model:187 - ✅ Selected best Opus model: claude-opus-4-1-20250805
2025-08-28T18:44:31.522256Z INFO     llm_iterative_session:_init_anthropic:435 - 🎯 Selected model: claude-opus-4-1-20250805
2025-08-28T18:44:31.859388Z INFO     llm_iterative_session:__init__:124 - 🤖 Iterative LLM Session initialized
2025-08-28T18:44:31.860224Z INFO     llm_iterative_session:__init__:125 -    Provider: anthropic
2025-08-28T18:44:31.860290Z INFO     llm_iterative_session:__init__:126 -    Model: claude-opus-4-1-20250805
2025-08-28T18:44:31.860362Z INFO     llm_iterative_session:__init__:127 -    Session: llm_session_20250828_184431
2025-08-28T18:44:31.860431Z INFO     llm_iterative_session:__init__:131 - 📊 Model Capabilities:
2025-08-28T18:44:31.860504Z INFO     llm_iterative_session:__init__:132 -    Context Window: 200,000 tokens
2025-08-28T18:44:31.860582Z INFO     llm_iterative_session:__init__:133 -    Max Input: 200,000 tokens
2025-08-28T18:44:31.860645Z INFO     llm_iterative_session:__init__:134 -    Max Output: 4,096 tokens
2025-08-28T18:44:31.860713Z INFO     llm_iterative_session:__init__:136 -    Cost: $0.000015/input, $0.000075/output per token
2025-08-28T18:44:31.860782Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1249 - 💰 Cost tracking: $0.000015/input token, $0.000075/output token
2025-08-28T18:44:31.860867Z INFO     llm_iterative_session:generate_initial_vrl:679 - 🚀 Starting VRL generation session (iteration 1)
2025-08-28T18:44:31.862726Z INFO     prompt_optimizer:_optimize_initial_configs:82 - Compressed vector_vrl_prompt: 20935 → 18968 chars (9.4% reduction)
2025-08-28T18:44:31.862883Z INFO     prompt_optimizer:_optimize_initial_configs:101 - Compressed parser_prompts: 10690 → 1988 chars (81.4% reduction)
2025-08-28T18:44:31.862991Z INFO     prompt_optimizer:_optimize_initial_configs:133 - Compressed type_maps: 2877 → 2749 chars (4.4% reduction)
2025-08-28T18:44:31.863465Z DEBUG    llm_iterative_session:_save_conversation:1297 - 💾 Saved user message to .tmp/llm_sessions/llm_session_20250828_184431/iter1_user.txt
2025-08-28T18:44:31.863519Z INFO     llm_iterative_session:_call_llm:1022 - 📤 Calling anthropic API
2025-08-28T18:44:31.863573Z DEBUG    llm_iterative_session:_call_llm:1023 -    Prompt length: 31037 chars
2025-08-28T18:45:20.013383Z INFO     llm_iterative_session:_call_llm:1038 - 📥 Response received in 48.1s (5480 chars)
2025-08-28T18:45:20.014142Z DEBUG    llm_iterative_session:_save_conversation:1297 - 💾 Saved assistant message to .tmp/llm_sessions/llm_session_20250828_184431/iter1_assistant.txt
2025-08-28T18:45:20.014276Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1263 - Testing iteration 1
2025-08-28T18:45:20.014372Z INFO     __main__:tracked_run:62 - 📍 Iteration 1 - LLM Call #1
2025-08-28T18:45:20.014441Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ============================================================
2025-08-28T18:45:20.014499Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - TESTING LLM-GENERATED VRL (Iteration 1)
2025-08-28T18:45:20.014552Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ============================================================
2025-08-28T18:45:20.014616Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - 
1. TESTING WITH PyVRL
2025-08-28T18:45:20.014673Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ----------------------------------------
2025-08-28T18:45:20.017982Z ERROR    vrl_testing_loop_clean:test_with_pyvrl:311 - ✗ PyVRL validation failed: 
error[E203]: syntax error
   ┌─ :20:9
   │
20 │       return
   │ ╭──────────^
   │ │ ╭────────'
21 │ │ │ }
   │ ╰─│^ unexpected syntax token: "Newline"
   │   ╰' expected one of: "!", "(", "[", "_", "abort", "false", "float literal", "function call", "identifier", "if", "integer literal", "null", "raw string literal", "regex literal", "return", "string literal", "timestamp literal", "true", "{", "path literal"
   │
   = see language documentation at https://vrl.dev
   = try your code in the VRL REPL, learn more at https://vrl.dev/examples

error[E203]: syntax error
   ┌─ :21:1
   │
21 │ }
   │ ^
   │ │
   │ unexpected syntax token: "RBrace"
   │ expected one of: "!", "(", "[", "_", "abort", "false", "float literal", "function call", "identifier", "if", "integer literal", "null", "raw string literal", "regex literal", "return", "string literal", "timestamp literal", "true", "{", "path literal"
   │
   = see language documentation at https://vrl.dev
   = try your code in the VRL REPL, learn more at https://vrl.dev/examples

error[E110]: fallible predicate
   ┌─ :31:17
   │
31 │     if contains(pid_section, "]") {
   │                 ^^^^^^^^^^^
   │                 │
   │                 this expression resolves to one of string or null
   │                 but the parameter "value" expects the exact type string
   │
   = try: ensuring an appropriate type at runtime
   =
   =     pid_section = string!(pid_section)
   =     contains(pid_section, "]")
   =
   = try: coercing to an appropriate type and specifying a default value as a fallback in case coercion fails
   =
   =     pid_section = to_string(pid_section) ?? "default"
   =     contains(pid_section, "]")
   =
   = see documentation about error handling at https://errors.vrl.dev/#handling
   = learn more about error code 110 at https://errors.vrl.dev/110
   = see language documentation at https://vrl.dev
   = try your code in the VRL REPL, learn more at https://vrl.dev/examples

error[E110]: fallible predicate
   ┌─ :47:17
   │
47 │     if contains(event_msg, "authentication failure") {
   │                 ^^^^^^^^^
   │                 │
   │                 this expression resolves to one of string or null
   │                 but the parameter "value" expects the exact type string
   │
   = try: ensuring an appropriate type at runtime
   =
   =     event_msg = string!(event_msg)
   =     contains(event_msg, "authentication failure")
   =
   = try: coercing to an appropriate type and specifying a default value as a fallback in case coercion fails
   =
   =     event_msg = to_string(event_msg) ?? "default"
   =     contains(event_msg, "authentication failure")
   =
   = see documentation about error handling at https://errors.vrl.dev/#handling
   = learn more about error code 110 at https://errors.vrl.dev/110
   = see language documentation at https://vrl.dev
   = try your code in the VRL REPL, learn more at https://vrl.dev/examples

2025-08-28T18:45:20.018204Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ❌ LLM VRL iteration 1 failed PyVRL validation
2025-08-28T18:45:20.018884Z INFO     error_batch_collector:collect_all_errors:46 - 📋 Phase 1: PyVRL syntax validation
2025-08-28T18:45:20.019092Z INFO     error_batch_collector:collect_all_errors:52 - 📋 Phase 2: Vector CLI validation
2025-08-28T18:45:20.026635Z INFO     error_batch_collector:collect_all_errors:75 - 📊 Collected 1 total errors
2025-08-28T18:45:20.026962Z INFO     error_batch_collector:collect_all_errors:79 -    other: 1 errors
2025-08-28T18:45:20.027147Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1347 - 📊 Collected 1 errors for batch fixing
2025-08-28T18:45:20.027312Z INFO     llm_iterative_session:iterate_with_feedback:713 - 🔄 Iterating VRL generation (iteration 2)
2025-08-28T18:45:20.027591Z DEBUG    llm_iterative_session:_save_conversation:1297 - 💾 Saved user message to .tmp/llm_sessions/llm_session_20250828_184431/iter2_user.txt
2025-08-28T18:45:20.027666Z DEBUG    llm_iterative_session:_call_llm:1019 - Adding 1.4s delay for iteration 2 to avoid rate limits
2025-08-28T18:45:21.427839Z INFO     llm_iterative_session:_call_llm:1022 - 📤 Calling anthropic API
2025-08-28T18:45:21.429326Z DEBUG    llm_iterative_session:_call_llm:1023 -    Prompt length: 465 chars
2025-08-28T18:46:09.353775Z INFO     llm_iterative_session:_call_llm:1038 - 📥 Response received in 47.9s (5973 chars)
2025-08-28T18:46:09.354331Z DEBUG    llm_iterative_session:_save_conversation:1297 - 💾 Saved assistant message to .tmp/llm_sessions/llm_session_20250828_184431/iter2_assistant.txt
2025-08-28T18:46:09.354418Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1263 - Testing iteration 2
2025-08-28T18:46:09.354491Z INFO     __main__:tracked_run:62 - 📍 Iteration 2 - LLM Call #2
2025-08-28T18:46:09.354550Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ============================================================
2025-08-28T18:46:09.354595Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - TESTING LLM-GENERATED VRL (Iteration 2)
2025-08-28T18:46:09.354635Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ============================================================
2025-08-28T18:46:09.354686Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - 
1. TESTING WITH PyVRL
2025-08-28T18:46:09.354730Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ----------------------------------------
2025-08-28T18:46:09.356803Z ERROR    vrl_testing_loop_clean:test_with_pyvrl:311 - ✗ PyVRL validation failed: 
error[E110]: fallible predicate
   ┌─ :32:19
   │
32 │       if contains(pid_section, "]") {
   │                   ^^^^^^^^^^^
   │                   │
   │                   this expression resolves to one of string or null
   │                   but the parameter "value" expects the exact type string
   │
   = try: ensuring an appropriate type at runtime
   =
   =     pid_section = string!(pid_section)
   =     contains(pid_section, "]")
   =
   = try: coercing to an appropriate type and specifying a default value as a fallback in case coercion fails
   =
   =     pid_section = to_string(pid_section) ?? "default"
   =     contains(pid_section, "]")
   =
   = see documentation about error handling at https://errors.vrl.dev/#handling
   = learn more about error code 110 at https://errors.vrl.dev/110
   = see language documentation at https://vrl.dev
   = try your code in the VRL REPL, learn more at https://vrl.dev/examples

2025-08-28T18:46:09.357026Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ❌ LLM VRL iteration 2 failed PyVRL validation
2025-08-28T18:46:09.357183Z INFO     error_batch_collector:collect_all_errors:46 - 📋 Phase 1: PyVRL syntax validation
2025-08-28T18:46:09.357325Z INFO     error_batch_collector:collect_all_errors:52 - 📋 Phase 2: Vector CLI validation
2025-08-28T18:46:09.365454Z INFO     error_batch_collector:collect_all_errors:75 - 📊 Collected 1 total errors
2025-08-28T18:46:09.365582Z INFO     error_batch_collector:collect_all_errors:79 -    other: 1 errors
2025-08-28T18:46:09.365670Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1347 - 📊 Collected 1 errors for batch fixing
2025-08-28T18:46:09.365740Z INFO     llm_iterative_session:iterate_with_feedback:713 - 🔄 Iterating VRL generation (iteration 3)
2025-08-28T18:46:09.366049Z DEBUG    llm_iterative_session:_save_conversation:1297 - 💾 Saved user message to .tmp/llm_sessions/llm_session_20250828_184431/iter3_user.txt
2025-08-28T18:46:09.366134Z DEBUG    llm_iterative_session:_call_llm:1019 - Adding 1.6s delay for iteration 3 to avoid rate limits
2025-08-28T18:46:10.966353Z INFO     llm_iterative_session:_call_llm:1022 - 📤 Calling anthropic API
2025-08-28T18:46:10.967036Z DEBUG    llm_iterative_session:_call_llm:1023 -    Prompt length: 465 chars
