2025-08-28T18:23:25.468247Z INFO     vrl_testing_loop_clean:_setup_logging:152 - VRL Testing Pipeline logging initialized
2025-08-28T18:23:25.468573Z INFO     vrl_testing_loop_clean:_setup_logging:153 - Log file: logs/vrl_pipeline_20250828_182325.log
2025-08-28T18:23:25.468661Z INFO     vrl_testing_loop_clean:_setup_logging:154 - Sample file: samples/large/ssh-real.ndjson
2025-08-28T18:23:25.468732Z INFO     vrl_testing_loop_clean:_setup_logging:155 - Output directory: samples-parsed
2025-08-28T18:23:25.468805Z INFO     vrl_testing_loop_clean:_setup_logging:156 - External configs: external
2025-08-28T18:23:25.468866Z INFO     vrl_testing_loop_clean:_setup_logging:157 - Loaded configs: ['vector_vrl_prompt', 'parser_prompts', 'type_maps']
2025-08-28T18:23:43.335958Z INFO     vrl_testing_loop_clean:__init__:113 - Benchmarking local CPU performance...
2025-08-28T18:23:43.340083Z INFO     vrl_testing_loop_clean:__init__:115 - CPU benchmark multiplier: 10.00x
2025-08-28T18:23:43.340188Z INFO     vrl_testing_loop_clean:__init__:118 - Measuring Vector CLI startup time...
2025-08-28T18:23:43.841890Z INFO     vrl_testing_loop_clean:__init__:120 - Vector startup time: 0.50s
2025-08-28T18:23:43.842091Z INFO     vrl_testing_loop_clean:_log_external_configs_summary:1067 - 📋 EXTERNAL CONFIGS SUMMARY (K8s deployed):
2025-08-28T18:23:43.842237Z INFO     vrl_testing_loop_clean:_log_external_configs_summary:1074 -    🎯 vector-vrl-system.md: v1.3.0...
2025-08-28T18:23:43.842305Z INFO     vrl_testing_loop_clean:_log_external_configs_summary:1075 -       Contains: Performance tiers, string ops, Vector 0.49.0 config
2025-08-28T18:23:43.842356Z INFO     vrl_testing_loop_clean:_log_external_configs_summary:1079 -    🔧 parser-system-prompts.md: 10690 chars of project overrides
2025-08-28T18:23:43.842426Z INFO     vrl_testing_loop_clean:_log_external_configs_summary:1085 -    📊 type_maps.csv: 24 field mappings for product evolution
2025-08-28T18:23:43.842480Z INFO     vrl_testing_loop_clean:_log_external_configs_summary:1087 -    💡 These configs are retained for persistent LLM context
2025-08-28T18:23:43.842931Z INFO     __main__:quick_iteration_test:85 - 🎯 Starting VRL generation with all optimizations...
2025-08-28T18:23:44.487679Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1201 - 🤖 Starting automated LLM VRL generation
2025-08-28T18:23:44.491025Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1202 - Provider: anthropic, Max iterations: 10
2025-08-28T18:23:44.502368Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1210 - 🔧 Optimizing samples with pre-tokenizer...
2025-08-28T18:23:45.160225Z INFO     pre_tokenizer.enhanced_optimizer:smart_sample_selection:132 - Found 1 distinct patterns in 655147 samples
2025-08-28T18:23:53.712224Z SUCCESS  pre_tokenizer.enhanced_optimizer:smart_sample_selection:172 - Selected 3 samples covering 1 patterns
2025-08-28T18:23:53.912091Z INFO     pre_tokenizer.pre_tokenizer:__init__:41 - Initialized PreTokenizer for claude-3-opus-20240229 with 30,000 max tokens
2025-08-28T18:23:53.912309Z INFO     pre_tokenizer.pre_tokenizer:optimize_samples:101 - Optimizing 3 samples for 30,000 tokens
2025-08-28T18:23:53.912768Z INFO     pre_tokenizer.pre_tokenizer:optimize_samples:116 - Reduced to 3 unique samples from 3
2025-08-28T18:23:53.912848Z INFO     pre_tokenizer.pre_tokenizer:optimize_samples:117 - Pattern distribution: {'auth': 1}
2025-08-28T18:23:53.914537Z SUCCESS  pre_tokenizer.pre_tokenizer:optimize_samples:190 - Selected 3 samples using 1,770 tokens
2025-08-28T18:23:53.914615Z INFO     pre_tokenizer.pre_tokenizer:optimize_samples:191 - Pattern coverage: 100.0%
2025-08-28T18:23:53.914666Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1241 - 📊 Sample optimization: 655147 → 3 samples
2025-08-28T18:23:53.914711Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1242 - 📊 Token usage: 1,770 tokens
2025-08-28T18:23:53.914751Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1243 - 📊 Pattern coverage: 100.0%
2025-08-28T18:23:53.954641Z INFO     llm_iterative_session:_init_anthropic:433 - 🔍 Auto-detecting latest Anthropic model...
2025-08-28T18:23:53.955119Z INFO     llm_iterative_session:_detect_best_anthropic_model:140 - 🔍 Querying Anthropic API for available models...
2025-08-28T18:23:54.338024Z INFO     llm_iterative_session:_detect_best_anthropic_model:166 - Available Anthropic models: ['claude-opus-4-1-20250805', 'claude-opus-4-20250514', 'claude-sonnet-4-20250514', 'claude-3-7-sonnet-20250219', 'claude-3-5-sonnet-20241022']...
2025-08-28T18:23:54.338363Z INFO     llm_iterative_session:_detect_best_anthropic_model:187 - ✅ Selected best Opus model: claude-opus-4-1-20250805
2025-08-28T18:23:54.340082Z INFO     llm_iterative_session:_init_anthropic:435 - 🎯 Selected model: claude-opus-4-1-20250805
2025-08-28T18:23:54.661878Z INFO     llm_iterative_session:__init__:124 - 🤖 Iterative LLM Session initialized
2025-08-28T18:23:54.662850Z INFO     llm_iterative_session:__init__:125 -    Provider: anthropic
2025-08-28T18:23:54.662951Z INFO     llm_iterative_session:__init__:126 -    Model: claude-opus-4-1-20250805
2025-08-28T18:23:54.662995Z INFO     llm_iterative_session:__init__:127 -    Session: llm_session_20250828_182353
2025-08-28T18:23:54.663034Z INFO     llm_iterative_session:__init__:131 - 📊 Model Capabilities:
2025-08-28T18:23:54.663162Z INFO     llm_iterative_session:__init__:132 -    Context Window: 200,000 tokens
2025-08-28T18:23:54.663218Z INFO     llm_iterative_session:__init__:133 -    Max Input: 200,000 tokens
2025-08-28T18:23:54.663258Z INFO     llm_iterative_session:__init__:134 -    Max Output: 4,096 tokens
2025-08-28T18:23:54.663341Z INFO     llm_iterative_session:__init__:136 -    Cost: $0.000015/input, $0.000075/output per token
2025-08-28T18:23:54.663402Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1249 - 💰 Cost tracking: $0.000015/input token, $0.000075/output token
2025-08-28T18:23:54.663455Z INFO     llm_iterative_session:generate_initial_vrl:679 - 🚀 Starting VRL generation session (iteration 1)
2025-08-28T18:23:54.664906Z INFO     prompt_optimizer:_optimize_initial_configs:82 - Compressed vector_vrl_prompt: 19919 → 18026 chars (9.5% reduction)
2025-08-28T18:23:54.665071Z INFO     prompt_optimizer:_optimize_initial_configs:101 - Compressed parser_prompts: 10690 → 1988 chars (81.4% reduction)
2025-08-28T18:23:54.665156Z INFO     prompt_optimizer:_optimize_initial_configs:133 - Compressed type_maps: 2877 → 2749 chars (4.4% reduction)
2025-08-28T18:23:54.665656Z DEBUG    llm_iterative_session:_save_conversation:1297 - 💾 Saved user message to .tmp/llm_sessions/llm_session_20250828_182353/iter1_user.txt
2025-08-28T18:23:54.665711Z INFO     llm_iterative_session:_call_llm:1022 - 📤 Calling anthropic API
2025-08-28T18:23:54.665766Z DEBUG    llm_iterative_session:_call_llm:1023 -    Prompt length: 30095 chars
2025-08-28T18:24:42.614387Z INFO     llm_iterative_session:_call_llm:1038 - 📥 Response received in 47.9s (5933 chars)
2025-08-28T18:24:42.615054Z DEBUG    llm_iterative_session:_save_conversation:1297 - 💾 Saved assistant message to .tmp/llm_sessions/llm_session_20250828_182353/iter1_assistant.txt
2025-08-28T18:24:42.615123Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1263 - Testing iteration 1
2025-08-28T18:24:42.615199Z INFO     __main__:tracked_run:62 - 📍 Iteration 1 - LLM Call #1
2025-08-28T18:24:42.615250Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ============================================================
2025-08-28T18:24:42.615292Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - TESTING LLM-GENERATED VRL (Iteration 1)
2025-08-28T18:24:42.615329Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ============================================================
2025-08-28T18:24:42.615373Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - 
1. TESTING WITH PyVRL
2025-08-28T18:24:42.615417Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ----------------------------------------
2025-08-28T18:24:42.621906Z ERROR    vrl_testing_loop_clean:test_with_pyvrl:311 - ✗ PyVRL validation failed: 
error[E203]: syntax error
   ┌─ :21:9
   │
21 │       return
   │ ╭──────────^
   │ │ ╭────────'
22 │ │ │ }
   │ ╰─│^ unexpected syntax token: "Newline"
   │   ╰' expected one of: "!", "(", "[", "_", "abort", "false", "float literal", "function call", "identifier", "if", "integer literal", "null", "raw string literal", "regex literal", "return", "string literal", "timestamp literal", "true", "{", "path literal"
   │
   = see language documentation at https://vrl.dev
   = try your code in the VRL REPL, learn more at https://vrl.dev/examples

error[E203]: syntax error
   ┌─ :22:1
   │
22 │ }
   │ ^
   │ │
   │ unexpected syntax token: "RBrace"
   │ expected one of: "!", "(", "[", "_", "abort", "false", "float literal", "function call", "identifier", "if", "integer literal", "null", "raw string literal", "regex literal", "return", "string literal", "timestamp literal", "true", "{", "path literal"
   │
   = see language documentation at https://vrl.dev
   = try your code in the VRL REPL, learn more at https://vrl.dev/examples

error[E103]: unhandled fallible assignment
   ┌─ :41:21
   │
41 │       space_parts = split(uid_section, " ")
   │       ------------- ^^^^^^^^^^^^^^^^^^^^^^^
   │       │             │
   │       │             this expression is fallible because at least one argument's type cannot be verified to be valid
   │       │             update the expression to be infallible by adding a `!`: `split!(uid_section, " ")`
   │       │             `uid_section` argument type is `string or null` and this function expected a parameter `value` of type `string`
   │       or change this to an infallible assignment:
   │       space_parts, err = split(uid_section, " ")
   │
   = see documentation about error handling at https://errors.vrl.dev/#handling
   = see functions characteristics documentation at https://vrl.dev/expressions/#function-call-characteristics
   = learn more about error code 103 at https://errors.vrl.dev/103
   = see language documentation at https://vrl.dev
   = try your code in the VRL REPL, learn more at https://vrl.dev/examples

error[E103]: unhandled fallible assignment
    ┌─ :118:21
    │
118 │       space_parts = split(user_section, " ")
    │       ------------- ^^^^^^^^^^^^^^^^^^^^^^^^
    │       │             │
    │       │             this expression is fallible because at least one argument's type cannot be verified to be valid
    │       │             update the expression to be infallible by adding a `!`: `split!(user_section, " ")`
    │       │             `user_section` argument type is `string or null` and this function expected a parameter `value` of type `string`
    │       or change this to an infallible assignment:
    │       space_parts, err = split(user_section, " ")
    │
    = see documentation about error handling at https://errors.vrl.dev/#handling
    = see functions characteristics documentation at https://vrl.dev/expressions/#function-call-characteristics
    = learn more about error code 103 at https://errors.vrl.dev/103
    = see language documentation at https://vrl.dev
    = try your code in the VRL REPL, learn more at https://vrl.dev/examples

error[E103]: unhandled fallible assignment
    ┌─ :176:21
    │
176 │     bracket_parts = split(pid_section, "]")
    │     --------------- ^^^^^^^^^^^^^^^^^^^^^^^
    │     │               │
    │     │               this expression is fallible because at least one argument's type cannot be verified to be valid
    │     │               update the expression to be infallible by adding a `!`: `split!(pid_section, "]")`
    │     │               `pid_section` argument type is `string or null` and this function expected a parameter `value` of type `string`
    │     or change this to an infallible assignment:
    │     bracket_parts, err = split(pid_section, "]")
    │
    = see documentation about error handling at https://errors.vrl.dev/#handling
    = see functions characteristics documentation at https://vrl.dev/expressions/#function-call-characteristics
    = learn more about error code 103 at https://errors.vrl.dev/103
    = see language documentation at https://vrl.dev
    = try your code in the VRL REPL, learn more at https://vrl.dev/examples

error[E110]: fallible predicate
    ┌─ :195:15
    │
195 │   if contains(time, ":") {
    │               ^^^^
    │               │
    │               this expression resolves to one of string or null
    │               but the parameter "value" expects the exact type string
    │
    = try: ensuring an appropriate type at runtime
    =
    =     time = string!(time)
    =     contains(time, ":")
    =
    = try: coercing to an appropriate type and specifying a default value as a fallback in case coercion fails
    =
    =     time = to_string(time) ?? "default"
    =     contains(time, ":")
    =
    = see documentation about error handling at https://errors.vrl.dev/#handling
    = learn more about error code 110 at https://errors.vrl.dev/110
    = see language documentation at https://vrl.dev
    = try your code in the VRL REPL, learn more at https://vrl.dev/examples

2025-08-28T18:24:42.622314Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ❌ LLM VRL iteration 1 failed PyVRL validation
2025-08-28T18:24:42.622895Z INFO     error_batch_collector:collect_all_errors:46 - 📋 Phase 1: PyVRL syntax validation
2025-08-28T18:24:42.622998Z INFO     error_batch_collector:collect_all_errors:52 - 📋 Phase 2: Vector CLI validation
2025-08-28T18:24:42.634098Z INFO     error_batch_collector:collect_all_errors:75 - 📊 Collected 1 total errors
2025-08-28T18:24:42.634244Z INFO     error_batch_collector:collect_all_errors:79 -    other: 1 errors
2025-08-28T18:24:42.634324Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1331 - 📊 Collected 1 errors for batch fixing
2025-08-28T18:24:42.634403Z INFO     llm_iterative_session:iterate_with_feedback:713 - 🔄 Iterating VRL generation (iteration 2)
2025-08-28T18:24:42.634698Z DEBUG    llm_iterative_session:_save_conversation:1297 - 💾 Saved user message to .tmp/llm_sessions/llm_session_20250828_182353/iter2_user.txt
2025-08-28T18:24:42.634780Z DEBUG    llm_iterative_session:_call_llm:1019 - Adding 1.4s delay for iteration 2 to avoid rate limits
2025-08-28T18:24:44.034959Z INFO     llm_iterative_session:_call_llm:1022 - 📤 Calling anthropic API
2025-08-28T18:24:44.035225Z DEBUG    llm_iterative_session:_call_llm:1023 -    Prompt length: 465 chars
2025-08-28T18:25:41.871735Z INFO     llm_iterative_session:_call_llm:1038 - 📥 Response received in 57.8s (6439 chars)
2025-08-28T18:25:41.873117Z DEBUG    llm_iterative_session:_save_conversation:1297 - 💾 Saved assistant message to .tmp/llm_sessions/llm_session_20250828_182353/iter2_assistant.txt
2025-08-28T18:25:41.873322Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1263 - Testing iteration 2
2025-08-28T18:25:41.873416Z INFO     __main__:tracked_run:62 - 📍 Iteration 2 - LLM Call #2
2025-08-28T18:25:41.873500Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ============================================================
2025-08-28T18:25:41.873558Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - TESTING LLM-GENERATED VRL (Iteration 2)
2025-08-28T18:25:41.873598Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ============================================================
2025-08-28T18:25:41.873649Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - 
1. TESTING WITH PyVRL
2025-08-28T18:25:41.873688Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ----------------------------------------
2025-08-28T18:25:41.877332Z ERROR    vrl_testing_loop_clean:test_with_pyvrl:311 - ✗ PyVRL validation failed: 
error[E103]: unhandled fallible assignment
   ┌─ :43:23
   │
43 │         space_parts = split(uid_section, " ")
   │         ------------- ^^^^^^^^^^^^^^^^^^^^^^^
   │         │             │
   │         │             this expression is fallible because at least one argument's type cannot be verified to be valid
   │         │             update the expression to be infallible by adding a `!`: `split!(uid_section, " ")`
   │         │             `uid_section` argument type is `string or null` and this function expected a parameter `value` of type `string`
   │         or change this to an infallible assignment:
   │         space_parts, err = split(uid_section, " ")
   │
   = see documentation about error handling at https://errors.vrl.dev/#handling
   = see functions characteristics documentation at https://vrl.dev/expressions/#function-call-characteristics
   = learn more about error code 103 at https://errors.vrl.dev/103
   = see language documentation at https://vrl.dev
   = try your code in the VRL REPL, learn more at https://vrl.dev/examples

2025-08-28T18:25:41.877507Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ❌ LLM VRL iteration 2 failed PyVRL validation
2025-08-28T18:25:41.877670Z INFO     error_batch_collector:collect_all_errors:46 - 📋 Phase 1: PyVRL syntax validation
2025-08-28T18:25:41.877800Z INFO     error_batch_collector:collect_all_errors:52 - 📋 Phase 2: Vector CLI validation
2025-08-28T18:25:41.890198Z INFO     error_batch_collector:collect_all_errors:75 - 📊 Collected 1 total errors
2025-08-28T18:25:41.890443Z INFO     error_batch_collector:collect_all_errors:79 -    other: 1 errors
2025-08-28T18:25:41.890541Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1331 - 📊 Collected 1 errors for batch fixing
2025-08-28T18:25:41.890624Z INFO     llm_iterative_session:iterate_with_feedback:713 - 🔄 Iterating VRL generation (iteration 3)
2025-08-28T18:25:41.890959Z DEBUG    llm_iterative_session:_save_conversation:1297 - 💾 Saved user message to .tmp/llm_sessions/llm_session_20250828_182353/iter3_user.txt
2025-08-28T18:25:41.891036Z DEBUG    llm_iterative_session:_call_llm:1019 - Adding 1.6s delay for iteration 3 to avoid rate limits
2025-08-28T18:25:43.491233Z INFO     llm_iterative_session:_call_llm:1022 - 📤 Calling anthropic API
2025-08-28T18:25:43.491523Z DEBUG    llm_iterative_session:_call_llm:1023 -    Prompt length: 465 chars
