2025-08-28T18:47:16.319581Z INFO     vrl_testing_loop_clean:_setup_logging:152 - VRL Testing Pipeline logging initialized
2025-08-28T18:47:16.319897Z INFO     vrl_testing_loop_clean:_setup_logging:153 - Log file: logs/vrl_pipeline_20250828_184716.log
2025-08-28T18:47:16.320056Z INFO     vrl_testing_loop_clean:_setup_logging:154 - Sample file: samples/large/ssh-real.ndjson
2025-08-28T18:47:16.320227Z INFO     vrl_testing_loop_clean:_setup_logging:155 - Output directory: samples-parsed
2025-08-28T18:47:16.320371Z INFO     vrl_testing_loop_clean:_setup_logging:156 - External configs: external
2025-08-28T18:47:16.320501Z INFO     vrl_testing_loop_clean:_setup_logging:157 - Loaded configs: ['vector_vrl_prompt', 'parser_prompts', 'type_maps']
2025-08-28T18:47:33.523111Z INFO     vrl_testing_loop_clean:__init__:113 - Benchmarking local CPU performance...
2025-08-28T18:47:33.527138Z INFO     vrl_testing_loop_clean:__init__:115 - CPU benchmark multiplier: 10.00x
2025-08-28T18:47:33.527200Z INFO     vrl_testing_loop_clean:__init__:118 - Measuring Vector CLI startup time...
2025-08-28T18:47:34.030773Z INFO     vrl_testing_loop_clean:__init__:120 - Vector startup time: 0.50s
2025-08-28T18:47:34.031093Z INFO     vrl_testing_loop_clean:_log_external_configs_summary:1067 - 📋 EXTERNAL CONFIGS SUMMARY (K8s deployed):
2025-08-28T18:47:34.031372Z INFO     vrl_testing_loop_clean:_log_external_configs_summary:1074 -    🎯 vector-vrl-system.md: v1.3.0...
2025-08-28T18:47:34.031592Z INFO     vrl_testing_loop_clean:_log_external_configs_summary:1075 -       Contains: Performance tiers, string ops, Vector 0.49.0 config
2025-08-28T18:47:34.031746Z INFO     vrl_testing_loop_clean:_log_external_configs_summary:1079 -    🔧 parser-system-prompts.md: 10690 chars of project overrides
2025-08-28T18:47:34.031909Z INFO     vrl_testing_loop_clean:_log_external_configs_summary:1085 -    📊 type_maps.csv: 24 field mappings for product evolution
2025-08-28T18:47:34.032116Z INFO     vrl_testing_loop_clean:_log_external_configs_summary:1087 -    💡 These configs are retained for persistent LLM context
2025-08-28T18:47:34.039431Z INFO     __main__:quick_iteration_test:85 - 🎯 Starting VRL generation with all optimizations...
2025-08-28T18:47:34.981357Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1201 - 🤖 Starting automated LLM VRL generation
2025-08-28T18:47:34.981577Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1202 - Provider: anthropic, Max iterations: 10
2025-08-28T18:47:34.991247Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1210 - 🔧 Optimizing samples with pre-tokenizer...
2025-08-28T18:47:35.497184Z INFO     pre_tokenizer.enhanced_optimizer:smart_sample_selection:132 - Found 1 distinct patterns in 655147 samples
2025-08-28T18:47:43.878887Z SUCCESS  pre_tokenizer.enhanced_optimizer:smart_sample_selection:172 - Selected 3 samples covering 1 patterns
2025-08-28T18:47:44.068634Z INFO     pre_tokenizer.pre_tokenizer:__init__:41 - Initialized PreTokenizer for claude-3-opus-20240229 with 30,000 max tokens
2025-08-28T18:47:44.068945Z INFO     pre_tokenizer.pre_tokenizer:optimize_samples:101 - Optimizing 3 samples for 30,000 tokens
2025-08-28T18:47:44.069489Z INFO     pre_tokenizer.pre_tokenizer:optimize_samples:116 - Reduced to 3 unique samples from 3
2025-08-28T18:47:44.069639Z INFO     pre_tokenizer.pre_tokenizer:optimize_samples:117 - Pattern distribution: {'auth': 1}
2025-08-28T18:47:44.072034Z SUCCESS  pre_tokenizer.pre_tokenizer:optimize_samples:190 - Selected 3 samples using 1,770 tokens
2025-08-28T18:47:44.072127Z INFO     pre_tokenizer.pre_tokenizer:optimize_samples:191 - Pattern coverage: 100.0%
2025-08-28T18:47:44.072193Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1241 - 📊 Sample optimization: 655147 → 3 samples
2025-08-28T18:47:44.072251Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1242 - 📊 Token usage: 1,770 tokens
2025-08-28T18:47:44.072302Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1243 - 📊 Pattern coverage: 100.0%
2025-08-28T18:47:44.113281Z INFO     llm_iterative_session:_init_anthropic:433 - 🔍 Auto-detecting latest Anthropic model...
2025-08-28T18:47:44.113759Z INFO     llm_iterative_session:_detect_best_anthropic_model:140 - 🔍 Querying Anthropic API for available models...
2025-08-28T18:47:44.430763Z INFO     llm_iterative_session:_detect_best_anthropic_model:166 - Available Anthropic models: ['claude-opus-4-1-20250805', 'claude-opus-4-20250514', 'claude-sonnet-4-20250514', 'claude-3-7-sonnet-20250219', 'claude-3-5-sonnet-20241022']...
2025-08-28T18:47:44.431012Z INFO     llm_iterative_session:_detect_best_anthropic_model:187 - ✅ Selected best Opus model: claude-opus-4-1-20250805
2025-08-28T18:47:44.432378Z INFO     llm_iterative_session:_init_anthropic:435 - 🎯 Selected model: claude-opus-4-1-20250805
2025-08-28T18:47:44.758894Z INFO     llm_iterative_session:__init__:124 - 🤖 Iterative LLM Session initialized
2025-08-28T18:47:44.761778Z INFO     llm_iterative_session:__init__:125 -    Provider: anthropic
2025-08-28T18:47:44.762965Z INFO     llm_iterative_session:__init__:126 -    Model: claude-opus-4-1-20250805
2025-08-28T18:47:44.763348Z INFO     llm_iterative_session:__init__:127 -    Session: llm_session_20250828_184744
2025-08-28T18:47:44.763606Z INFO     llm_iterative_session:__init__:131 - 📊 Model Capabilities:
2025-08-28T18:47:44.763903Z INFO     llm_iterative_session:__init__:132 -    Context Window: 200,000 tokens
2025-08-28T18:47:44.764263Z INFO     llm_iterative_session:__init__:133 -    Max Input: 200,000 tokens
2025-08-28T18:47:44.764614Z INFO     llm_iterative_session:__init__:134 -    Max Output: 4,096 tokens
2025-08-28T18:47:44.766952Z INFO     llm_iterative_session:__init__:136 -    Cost: $0.000015/input, $0.000075/output per token
2025-08-28T18:47:44.770031Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1249 - 💰 Cost tracking: $0.000015/input token, $0.000075/output token
2025-08-28T18:47:44.773344Z INFO     llm_iterative_session:generate_initial_vrl:679 - 🚀 Starting VRL generation session (iteration 1)
2025-08-28T18:47:44.775440Z INFO     prompt_optimizer:_optimize_initial_configs:82 - Compressed vector_vrl_prompt: 20935 → 18968 chars (9.4% reduction)
2025-08-28T18:47:44.775654Z INFO     prompt_optimizer:_optimize_initial_configs:101 - Compressed parser_prompts: 10690 → 1988 chars (81.4% reduction)
2025-08-28T18:47:44.775764Z INFO     prompt_optimizer:_optimize_initial_configs:133 - Compressed type_maps: 2877 → 2749 chars (4.4% reduction)
2025-08-28T18:47:44.776672Z DEBUG    llm_iterative_session:_save_conversation:1297 - 💾 Saved user message to .tmp/llm_sessions/llm_session_20250828_184744/iter1_user.txt
2025-08-28T18:47:44.776758Z INFO     llm_iterative_session:_call_llm:1022 - 📤 Calling anthropic API
2025-08-28T18:47:44.776861Z DEBUG    llm_iterative_session:_call_llm:1023 -    Prompt length: 31037 chars
2025-08-28T18:48:21.072504Z INFO     llm_iterative_session:_call_llm:1038 - 📥 Response received in 36.3s (3736 chars)
2025-08-28T18:48:21.073027Z DEBUG    llm_iterative_session:_save_conversation:1297 - 💾 Saved assistant message to .tmp/llm_sessions/llm_session_20250828_184744/iter1_assistant.txt
2025-08-28T18:48:21.073132Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1263 - Testing iteration 1
2025-08-28T18:48:21.073211Z INFO     __main__:tracked_run:62 - 📍 Iteration 1 - LLM Call #1
2025-08-28T18:48:21.073275Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ============================================================
2025-08-28T18:48:21.073325Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - TESTING LLM-GENERATED VRL (Iteration 1)
2025-08-28T18:48:21.073370Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ============================================================
2025-08-28T18:48:21.073423Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - 
1. TESTING WITH PyVRL
2025-08-28T18:48:21.073475Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ----------------------------------------
2025-08-28T18:48:21.076003Z ERROR    vrl_testing_loop_clean:test_with_pyvrl:311 - ✗ PyVRL validation failed: 
error[E203]: syntax error
   ┌─ :20:9
   │
20 │       return
   │ ╭──────────^
   │ │ ╭────────'
21 │ │ │ }
   │ ╰─│^ unexpected syntax token: "Newline"
   │   ╰' expected one of: "!", "(", "[", "_", "abort", "false", "float literal", "function call", "identifier", "if", "integer literal", "null", "raw string literal", "regex literal", "return", "string literal", "timestamp literal", "true", "{", "path literal"
   │
   = see language documentation at https://vrl.dev
   = try your code in the VRL REPL, learn more at https://vrl.dev/examples

error[E203]: syntax error
   ┌─ :21:1
   │
21 │ }
   │ ^
   │ │
   │ unexpected syntax token: "RBrace"
   │ expected one of: "!", "(", "[", "_", "abort", "false", "float literal", "function call", "identifier", "if", "integer literal", "null", "raw string literal", "regex literal", "return", "string literal", "timestamp literal", "true", "{", "path literal"
   │
   = see language documentation at https://vrl.dev
   = try your code in the VRL REPL, learn more at https://vrl.dev/examples

error[E103]: unhandled fallible assignment
   ┌─ :35:21
   │
35 │       space_parts = split(rhost_section, " ")
   │       ------------- ^^^^^^^^^^^^^^^^^^^^^^^^^
   │       │             │
   │       │             this expression is fallible because at least one argument's type cannot be verified to be valid
   │       │             update the expression to be infallible by adding a `!`: `split!(rhost_section, " ")`
   │       │             `rhost_section` argument type is `string or null` and this function expected a parameter `value` of type `string`
   │       or change this to an infallible assignment:
   │       space_parts, err = split(rhost_section, " ")
   │
   = see documentation about error handling at https://errors.vrl.dev/#handling
   = see functions characteristics documentation at https://vrl.dev/expressions/#function-call-characteristics
   = learn more about error code 103 at https://errors.vrl.dev/103
   = see language documentation at https://vrl.dev
   = try your code in the VRL REPL, learn more at https://vrl.dev/examples

error[E103]: unhandled fallible assignment
   ┌─ :76:20
   │
76 │       from_parts = split(user_section, " from ")
   │       ------------ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   │       │            │
   │       │            this expression is fallible because at least one argument's type cannot be verified to be valid
   │       │            update the expression to be infallible by adding a `!`: `split!(user_section, " from ")`
   │       │            `user_section` argument type is `string or null` and this function expected a parameter `value` of type `string`
   │       or change this to an infallible assignment:
   │       from_parts, err = split(user_section, " from ")
   │
   = see documentation about error handling at https://errors.vrl.dev/#handling
   = see functions characteristics documentation at https://vrl.dev/expressions/#function-call-characteristics
   = learn more about error code 103 at https://errors.vrl.dev/103
   = see language documentation at https://vrl.dev
   = try your code in the VRL REPL, learn more at https://vrl.dev/examples

error[E103]: unhandled fallible assignment
    ┌─ :116:21
    │
116 │     bracket_parts = split(pid_section, "]")
    │     --------------- ^^^^^^^^^^^^^^^^^^^^^^^
    │     │               │
    │     │               this expression is fallible because at least one argument's type cannot be verified to be valid
    │     │               update the expression to be infallible by adding a `!`: `split!(pid_section, "]")`
    │     │               `pid_section` argument type is `string or null` and this function expected a parameter `value` of type `string`
    │     or change this to an infallible assignment:
    │     bracket_parts, err = split(pid_section, "]")
    │
    = see documentation about error handling at https://errors.vrl.dev/#handling
    = see functions characteristics documentation at https://vrl.dev/expressions/#function-call-characteristics
    = learn more about error code 103 at https://errors.vrl.dev/103
    = see language documentation at https://vrl.dev
    = try your code in the VRL REPL, learn more at https://vrl.dev/examples

error[E620]: can't abort infallible function
    ┌─ :138:30
    │
138 │   .ssh.event_type = downcase(string!(.ssh.event_type))
    │                              ^^^^^^- remove this abort-instruction
    │                              │
    │                              this function can't fail
    │
    = see documentation about error handling at https://errors.vrl.dev/#handling
    = see language documentation at https://vrl.dev
    = try your code in the VRL REPL, learn more at https://vrl.dev/examples

2025-08-28T18:48:21.076108Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ❌ LLM VRL iteration 1 failed PyVRL validation
2025-08-28T18:48:21.076510Z INFO     error_batch_collector:collect_all_errors:46 - 📋 Phase 1: PyVRL syntax validation
2025-08-28T18:48:21.076583Z INFO     error_batch_collector:collect_all_errors:52 - 📋 Phase 2: Vector CLI validation
2025-08-28T18:48:21.083210Z INFO     error_batch_collector:collect_all_errors:75 - 📊 Collected 1 total errors
2025-08-28T18:48:21.083308Z INFO     error_batch_collector:collect_all_errors:79 -    other: 1 errors
2025-08-28T18:48:21.083370Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1347 - 📊 Collected 1 errors for batch fixing
2025-08-28T18:48:21.083426Z INFO     llm_iterative_session:iterate_with_feedback:713 - 🔄 Iterating VRL generation (iteration 2)
2025-08-28T18:48:21.083636Z DEBUG    llm_iterative_session:_save_conversation:1297 - 💾 Saved user message to .tmp/llm_sessions/llm_session_20250828_184744/iter2_user.txt
2025-08-28T18:48:21.083698Z DEBUG    llm_iterative_session:_call_llm:1019 - Adding 1.4s delay for iteration 2 to avoid rate limits
2025-08-28T18:48:22.483868Z INFO     llm_iterative_session:_call_llm:1022 - 📤 Calling anthropic API
2025-08-28T18:48:22.484163Z DEBUG    llm_iterative_session:_call_llm:1023 -    Prompt length: 465 chars
2025-08-28T18:49:00.342414Z INFO     llm_iterative_session:_call_llm:1038 - 📥 Response received in 37.9s (4144 chars)
2025-08-28T18:49:00.343294Z DEBUG    llm_iterative_session:_save_conversation:1297 - 💾 Saved assistant message to .tmp/llm_sessions/llm_session_20250828_184744/iter2_assistant.txt
2025-08-28T18:49:00.343579Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1263 - Testing iteration 2
2025-08-28T18:49:00.343714Z INFO     __main__:tracked_run:62 - 📍 Iteration 2 - LLM Call #2
2025-08-28T18:49:00.343982Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ============================================================
2025-08-28T18:49:00.344083Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - TESTING LLM-GENERATED VRL (Iteration 2)
2025-08-28T18:49:00.344165Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ============================================================
2025-08-28T18:49:00.344236Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - 
1. TESTING WITH PyVRL
2025-08-28T18:49:00.344308Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ----------------------------------------
2025-08-28T18:49:00.346679Z ERROR    vrl_testing_loop_clean:test_with_pyvrl:311 - ✗ PyVRL validation failed: 
error[E103]: unhandled fallible assignment
   ┌─ :34:23
   │
34 │         space_parts = split(rhost_section, " ")
   │         ------------- ^^^^^^^^^^^^^^^^^^^^^^^^^
   │         │             │
   │         │             this expression is fallible because at least one argument's type cannot be verified to be valid
   │         │             update the expression to be infallible by adding a `!`: `split!(rhost_section, " ")`
   │         │             `rhost_section` argument type is `string or null` and this function expected a parameter `value` of type `string`
   │         or change this to an infallible assignment:
   │         space_parts, err = split(rhost_section, " ")
   │
   = see documentation about error handling at https://errors.vrl.dev/#handling
   = see functions characteristics documentation at https://vrl.dev/expressions/#function-call-characteristics
   = learn more about error code 103 at https://errors.vrl.dev/103
   = see language documentation at https://vrl.dev
   = try your code in the VRL REPL, learn more at https://vrl.dev/examples

2025-08-28T18:49:00.346859Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ❌ LLM VRL iteration 2 failed PyVRL validation
2025-08-28T18:49:00.347036Z INFO     error_batch_collector:collect_all_errors:46 - 📋 Phase 1: PyVRL syntax validation
2025-08-28T18:49:00.347113Z INFO     error_batch_collector:collect_all_errors:52 - 📋 Phase 2: Vector CLI validation
2025-08-28T18:49:00.358197Z INFO     error_batch_collector:collect_all_errors:75 - 📊 Collected 1 total errors
2025-08-28T18:49:00.360109Z INFO     error_batch_collector:collect_all_errors:79 -    other: 1 errors
2025-08-28T18:49:00.360233Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1347 - 📊 Collected 1 errors for batch fixing
2025-08-28T18:49:00.360296Z INFO     llm_iterative_session:iterate_with_feedback:713 - 🔄 Iterating VRL generation (iteration 3)
2025-08-28T18:49:00.360590Z DEBUG    llm_iterative_session:_save_conversation:1297 - 💾 Saved user message to .tmp/llm_sessions/llm_session_20250828_184744/iter3_user.txt
2025-08-28T18:49:00.360658Z DEBUG    llm_iterative_session:_call_llm:1019 - Adding 1.6s delay for iteration 3 to avoid rate limits
2025-08-28T18:49:01.960836Z INFO     llm_iterative_session:_call_llm:1022 - 📤 Calling anthropic API
2025-08-28T18:49:01.961204Z DEBUG    llm_iterative_session:_call_llm:1023 -    Prompt length: 465 chars
2025-08-28T18:49:40.752676Z INFO     llm_iterative_session:_call_llm:1038 - 📥 Response received in 38.8s (4255 chars)
2025-08-28T18:49:40.760931Z DEBUG    llm_iterative_session:_save_conversation:1297 - 💾 Saved assistant message to .tmp/llm_sessions/llm_session_20250828_184744/iter3_assistant.txt
2025-08-28T18:49:40.761166Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1263 - Testing iteration 3
2025-08-28T18:49:40.761337Z INFO     __main__:tracked_run:62 - 📍 Iteration 3 - LLM Call #3
2025-08-28T18:49:40.761425Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ============================================================
2025-08-28T18:49:40.761481Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - TESTING LLM-GENERATED VRL (Iteration 3)
2025-08-28T18:49:40.761527Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ============================================================
2025-08-28T18:49:40.761587Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - 
1. TESTING WITH PyVRL
2025-08-28T18:49:40.761641Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ----------------------------------------
2025-08-28T18:49:40.763272Z ERROR    vrl_testing_loop_clean:test_with_pyvrl:311 - ✗ PyVRL validation failed: 
error[E620]: can't abort infallible function
   ┌─ :33:21
   │
33 │       rhost_parts = split!(msg, "rhost=")
   │                     ^^^^^- remove this abort-instruction
   │                     │
   │                     this function can't fail
   │
   = see documentation about error handling at https://errors.vrl.dev/#handling
   = see language documentation at https://vrl.dev
   = try your code in the VRL REPL, learn more at https://vrl.dev/examples

2025-08-28T18:49:40.763491Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ❌ LLM VRL iteration 3 failed PyVRL validation
2025-08-28T18:49:40.763716Z INFO     error_batch_collector:collect_all_errors:46 - 📋 Phase 1: PyVRL syntax validation
2025-08-28T18:49:40.763844Z INFO     error_batch_collector:collect_all_errors:52 - 📋 Phase 2: Vector CLI validation
2025-08-28T18:49:40.799048Z INFO     error_batch_collector:collect_all_errors:75 - 📊 Collected 1 total errors
2025-08-28T18:49:40.799446Z INFO     error_batch_collector:collect_all_errors:79 -    other: 1 errors
2025-08-28T18:49:40.799665Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1347 - 📊 Collected 1 errors for batch fixing
2025-08-28T18:49:40.799868Z INFO     llm_iterative_session:iterate_with_feedback:713 - 🔄 Iterating VRL generation (iteration 4)
2025-08-28T18:49:40.800331Z DEBUG    llm_iterative_session:_save_conversation:1297 - 💾 Saved user message to .tmp/llm_sessions/llm_session_20250828_184744/iter4_user.txt
2025-08-28T18:49:40.800414Z DEBUG    llm_iterative_session:_call_llm:1019 - Adding 1.8s delay for iteration 4 to avoid rate limits
2025-08-28T18:49:42.600576Z INFO     llm_iterative_session:_call_llm:1022 - 📤 Calling anthropic API
2025-08-28T18:49:42.600809Z DEBUG    llm_iterative_session:_call_llm:1023 -    Prompt length: 465 chars
