2025-08-28T18:38:06.180780Z INFO     vrl_testing_loop_clean:_setup_logging:152 - VRL Testing Pipeline logging initialized
2025-08-28T18:38:06.181222Z INFO     vrl_testing_loop_clean:_setup_logging:153 - Log file: logs/vrl_pipeline_20250828_183806.log
2025-08-28T18:38:06.181420Z INFO     vrl_testing_loop_clean:_setup_logging:154 - Sample file: samples/large/ssh-real.ndjson
2025-08-28T18:38:06.181601Z INFO     vrl_testing_loop_clean:_setup_logging:155 - Output directory: samples-parsed
2025-08-28T18:38:06.181793Z INFO     vrl_testing_loop_clean:_setup_logging:156 - External configs: external
2025-08-28T18:38:06.181926Z INFO     vrl_testing_loop_clean:_setup_logging:157 - Loaded configs: ['vector_vrl_prompt', 'parser_prompts', 'type_maps']
2025-08-28T18:38:23.054279Z INFO     vrl_testing_loop_clean:__init__:113 - Benchmarking local CPU performance...
2025-08-28T18:38:23.061357Z INFO     vrl_testing_loop_clean:__init__:115 - CPU benchmark multiplier: 10.00x
2025-08-28T18:38:23.061691Z INFO     vrl_testing_loop_clean:__init__:118 - Measuring Vector CLI startup time...
2025-08-28T18:38:23.564857Z INFO     vrl_testing_loop_clean:__init__:120 - Vector startup time: 0.50s
2025-08-28T18:38:23.565711Z INFO     vrl_testing_loop_clean:_log_external_configs_summary:1067 - 📋 EXTERNAL CONFIGS SUMMARY (K8s deployed):
2025-08-28T18:38:23.566317Z INFO     vrl_testing_loop_clean:_log_external_configs_summary:1074 -    🎯 vector-vrl-system.md: v1.3.0...
2025-08-28T18:38:23.566829Z INFO     vrl_testing_loop_clean:_log_external_configs_summary:1075 -       Contains: Performance tiers, string ops, Vector 0.49.0 config
2025-08-28T18:38:23.567178Z INFO     vrl_testing_loop_clean:_log_external_configs_summary:1079 -    🔧 parser-system-prompts.md: 10690 chars of project overrides
2025-08-28T18:38:23.567345Z INFO     vrl_testing_loop_clean:_log_external_configs_summary:1085 -    📊 type_maps.csv: 24 field mappings for product evolution
2025-08-28T18:38:23.567438Z INFO     vrl_testing_loop_clean:_log_external_configs_summary:1087 -    💡 These configs are retained for persistent LLM context
2025-08-28T18:38:23.571569Z INFO     __main__:quick_iteration_test:85 - 🎯 Starting VRL generation with all optimizations...
2025-08-28T18:38:24.235776Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1201 - 🤖 Starting automated LLM VRL generation
2025-08-28T18:38:24.236751Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1202 - Provider: anthropic, Max iterations: 10
2025-08-28T18:38:24.246265Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1210 - 🔧 Optimizing samples with pre-tokenizer...
2025-08-28T18:38:24.827804Z INFO     pre_tokenizer.enhanced_optimizer:smart_sample_selection:132 - Found 1 distinct patterns in 655147 samples
2025-08-28T18:38:33.991936Z SUCCESS  pre_tokenizer.enhanced_optimizer:smart_sample_selection:172 - Selected 3 samples covering 1 patterns
2025-08-28T18:38:34.150348Z INFO     pre_tokenizer.pre_tokenizer:__init__:41 - Initialized PreTokenizer for claude-3-opus-20240229 with 30,000 max tokens
2025-08-28T18:38:34.150846Z INFO     pre_tokenizer.pre_tokenizer:optimize_samples:101 - Optimizing 3 samples for 30,000 tokens
2025-08-28T18:38:34.151465Z INFO     pre_tokenizer.pre_tokenizer:optimize_samples:116 - Reduced to 3 unique samples from 3
2025-08-28T18:38:34.151766Z INFO     pre_tokenizer.pre_tokenizer:optimize_samples:117 - Pattern distribution: {'auth': 1}
2025-08-28T18:38:34.153592Z SUCCESS  pre_tokenizer.pre_tokenizer:optimize_samples:190 - Selected 3 samples using 1,770 tokens
2025-08-28T18:38:34.153880Z INFO     pre_tokenizer.pre_tokenizer:optimize_samples:191 - Pattern coverage: 100.0%
2025-08-28T18:38:34.153969Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1241 - 📊 Sample optimization: 655147 → 3 samples
2025-08-28T18:38:34.154020Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1242 - 📊 Token usage: 1,770 tokens
2025-08-28T18:38:34.154062Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1243 - 📊 Pattern coverage: 100.0%
2025-08-28T18:38:34.187266Z INFO     llm_iterative_session:_init_anthropic:433 - 🔍 Auto-detecting latest Anthropic model...
2025-08-28T18:38:34.187989Z INFO     llm_iterative_session:_detect_best_anthropic_model:140 - 🔍 Querying Anthropic API for available models...
2025-08-28T18:38:34.525227Z INFO     llm_iterative_session:_detect_best_anthropic_model:166 - Available Anthropic models: ['claude-opus-4-1-20250805', 'claude-opus-4-20250514', 'claude-sonnet-4-20250514', 'claude-3-7-sonnet-20250219', 'claude-3-5-sonnet-20241022']...
2025-08-28T18:38:34.527996Z INFO     llm_iterative_session:_detect_best_anthropic_model:187 - ✅ Selected best Opus model: claude-opus-4-1-20250805
2025-08-28T18:38:34.534002Z INFO     llm_iterative_session:_init_anthropic:435 - 🎯 Selected model: claude-opus-4-1-20250805
2025-08-28T18:38:34.896033Z INFO     llm_iterative_session:__init__:124 - 🤖 Iterative LLM Session initialized
2025-08-28T18:38:34.896674Z INFO     llm_iterative_session:__init__:125 -    Provider: anthropic
2025-08-28T18:38:34.896811Z INFO     llm_iterative_session:__init__:126 -    Model: claude-opus-4-1-20250805
2025-08-28T18:38:34.896936Z INFO     llm_iterative_session:__init__:127 -    Session: llm_session_20250828_183834
2025-08-28T18:38:34.897036Z INFO     llm_iterative_session:__init__:131 - 📊 Model Capabilities:
2025-08-28T18:38:34.897147Z INFO     llm_iterative_session:__init__:132 -    Context Window: 200,000 tokens
2025-08-28T18:38:34.897250Z INFO     llm_iterative_session:__init__:133 -    Max Input: 200,000 tokens
2025-08-28T18:38:34.897342Z INFO     llm_iterative_session:__init__:134 -    Max Output: 4,096 tokens
2025-08-28T18:38:34.897439Z INFO     llm_iterative_session:__init__:136 -    Cost: $0.000015/input, $0.000075/output per token
2025-08-28T18:38:34.897592Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1249 - 💰 Cost tracking: $0.000015/input token, $0.000075/output token
2025-08-28T18:38:34.897715Z INFO     llm_iterative_session:generate_initial_vrl:679 - 🚀 Starting VRL generation session (iteration 1)
2025-08-28T18:38:34.899812Z INFO     prompt_optimizer:_optimize_initial_configs:82 - Compressed vector_vrl_prompt: 20935 → 18968 chars (9.4% reduction)
2025-08-28T18:38:34.900098Z INFO     prompt_optimizer:_optimize_initial_configs:101 - Compressed parser_prompts: 10690 → 1988 chars (81.4% reduction)
2025-08-28T18:38:34.900255Z INFO     prompt_optimizer:_optimize_initial_configs:133 - Compressed type_maps: 2877 → 2749 chars (4.4% reduction)
2025-08-28T18:38:34.900934Z DEBUG    llm_iterative_session:_save_conversation:1297 - 💾 Saved user message to .tmp/llm_sessions/llm_session_20250828_183834/iter1_user.txt
2025-08-28T18:38:34.901013Z INFO     llm_iterative_session:_call_llm:1022 - 📤 Calling anthropic API
2025-08-28T18:38:34.901135Z DEBUG    llm_iterative_session:_call_llm:1023 -    Prompt length: 31037 chars
2025-08-28T18:39:29.328518Z INFO     llm_iterative_session:_call_llm:1038 - 📥 Response received in 54.4s (5892 chars)
2025-08-28T18:39:29.330631Z DEBUG    llm_iterative_session:_save_conversation:1297 - 💾 Saved assistant message to .tmp/llm_sessions/llm_session_20250828_183834/iter1_assistant.txt
2025-08-28T18:39:29.330859Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1263 - Testing iteration 1
2025-08-28T18:39:29.331325Z INFO     __main__:tracked_run:62 - 📍 Iteration 1 - LLM Call #1
2025-08-28T18:39:29.331686Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ============================================================
2025-08-28T18:39:29.332033Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - TESTING LLM-GENERATED VRL (Iteration 1)
2025-08-28T18:39:29.332088Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ============================================================
2025-08-28T18:39:29.332141Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - 
1. TESTING WITH PyVRL
2025-08-28T18:39:29.332181Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ----------------------------------------
2025-08-28T18:39:29.339055Z ERROR    vrl_testing_loop_clean:test_with_pyvrl:311 - ✗ PyVRL validation failed: 
error[E203]: syntax error
   ┌─ :20:9
   │
20 │       return
   │ ╭──────────^
   │ │ ╭────────'
21 │ │ │ }
   │ ╰─│^ unexpected syntax token: "Newline"
   │   ╰' expected one of: "!", "(", "[", "_", "abort", "false", "float literal", "function call", "identifier", "if", "integer literal", "null", "raw string literal", "regex literal", "return", "string literal", "timestamp literal", "true", "{", "path literal"
   │
   = see language documentation at https://vrl.dev
   = try your code in the VRL REPL, learn more at https://vrl.dev/examples

error[E203]: syntax error
   ┌─ :21:1
   │
21 │ }
   │ ^
   │ │
   │ unexpected syntax token: "RBrace"
   │ expected one of: "!", "(", "[", "_", "abort", "false", "float literal", "function call", "identifier", "if", "integer literal", "null", "raw string literal", "regex literal", "return", "string literal", "timestamp literal", "true", "{", "path literal"
   │
   = see language documentation at https://vrl.dev
   = try your code in the VRL REPL, learn more at https://vrl.dev/examples

error[E103]: unhandled fallible assignment
   ┌─ :35:21
   │
35 │       space_parts = split(rhost_section, " ")
   │       ------------- ^^^^^^^^^^^^^^^^^^^^^^^^^
   │       │             │
   │       │             this expression is fallible because at least one argument's type cannot be verified to be valid
   │       │             update the expression to be infallible by adding a `!`: `split!(rhost_section, " ")`
   │       │             `rhost_section` argument type is `string or null` and this function expected a parameter `value` of type `string`
   │       or change this to an infallible assignment:
   │       space_parts, err = split(rhost_section, " ")
   │
   = see documentation about error handling at https://errors.vrl.dev/#handling
   = see functions characteristics documentation at https://vrl.dev/expressions/#function-call-characteristics
   = learn more about error code 103 at https://errors.vrl.dev/103
   = see language documentation at https://vrl.dev
   = try your code in the VRL REPL, learn more at https://vrl.dev/examples

error[E103]: unhandled fallible assignment
   ┌─ :97:21
   │
97 │       space_parts = split(user_section, " ")
   │       ------------- ^^^^^^^^^^^^^^^^^^^^^^^^
   │       │             │
   │       │             this expression is fallible because at least one argument's type cannot be verified to be valid
   │       │             update the expression to be infallible by adding a `!`: `split!(user_section, " ")`
   │       │             `user_section` argument type is `string or null` and this function expected a parameter `value` of type `string`
   │       or change this to an infallible assignment:
   │       space_parts, err = split(user_section, " ")
   │
   = see documentation about error handling at https://errors.vrl.dev/#handling
   = see functions characteristics documentation at https://vrl.dev/expressions/#function-call-characteristics
   = learn more about error code 103 at https://errors.vrl.dev/103
   = see language documentation at https://vrl.dev
   = try your code in the VRL REPL, learn more at https://vrl.dev/examples

error[E103]: unhandled fallible assignment
    ┌─ :146:21
    │
146 │       space_parts = split(user_section, " ")
    │       ------------- ^^^^^^^^^^^^^^^^^^^^^^^^
    │       │             │
    │       │             this expression is fallible because at least one argument's type cannot be verified to be valid
    │       │             update the expression to be infallible by adding a `!`: `split!(user_section, " ")`
    │       │             `user_section` argument type is `string or null` and this function expected a parameter `value` of type `string`
    │       or change this to an infallible assignment:
    │       space_parts, err = split(user_section, " ")
    │
    = see documentation about error handling at https://errors.vrl.dev/#handling
    = see functions characteristics documentation at https://vrl.dev/expressions/#function-call-characteristics
    = learn more about error code 103 at https://errors.vrl.dev/103
    = see language documentation at https://vrl.dev
    = try your code in the VRL REPL, learn more at https://vrl.dev/examples

error[E103]: unhandled fallible assignment
    ┌─ :188:21
    │
188 │       space_parts = split(user_section, " ")
    │       ------------- ^^^^^^^^^^^^^^^^^^^^^^^^
    │       │             │
    │       │             this expression is fallible because at least one argument's type cannot be verified to be valid
    │       │             update the expression to be infallible by adding a `!`: `split!(user_section, " ")`
    │       │             `user_section` argument type is `string or null` and this function expected a parameter `value` of type `string`
    │       or change this to an infallible assignment:
    │       space_parts, err = split(user_section, " ")
    │
    = see documentation about error handling at https://errors.vrl.dev/#handling
    = see functions characteristics documentation at https://vrl.dev/expressions/#function-call-characteristics
    = learn more about error code 103 at https://errors.vrl.dev/103
    = see language documentation at https://vrl.dev
    = try your code in the VRL REPL, learn more at https://vrl.dev/examples

error[E103]: unhandled fallible assignment
    ┌─ :212:21
    │
212 │     bracket_parts = split(pid_section, "]")
    │     --------------- ^^^^^^^^^^^^^^^^^^^^^^^
    │     │               │
    │     │               this expression is fallible because at least one argument's type cannot be verified to be valid
    │     │               update the expression to be infallible by adding a `!`: `split!(pid_section, "]")`
    │     │               `pid_section` argument type is `string or null` and this function expected a parameter `value` of type `string`
    │     or change this to an infallible assignment:
    │     bracket_parts, err = split(pid_section, "]")
    │
    = see documentation about error handling at https://errors.vrl.dev/#handling
    = see functions characteristics documentation at https://vrl.dev/expressions/#function-call-characteristics
    = learn more about error code 103 at https://errors.vrl.dev/103
    = see language documentation at https://vrl.dev
    = try your code in the VRL REPL, learn more at https://vrl.dev/examples

error[E620]: can't abort infallible function
    ┌─ :229:30
    │
229 │   .ssh.event_type = downcase(string!(.ssh.event_type))
    │                              ^^^^^^- remove this abort-instruction
    │                              │
    │                              this function can't fail
    │
    = see documentation about error handling at https://errors.vrl.dev/#handling
    = see language documentation at https://vrl.dev
    = try your code in the VRL REPL, learn more at https://vrl.dev/examples

2025-08-28T18:39:29.339179Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ❌ LLM VRL iteration 1 failed PyVRL validation
2025-08-28T18:39:29.343256Z INFO     error_batch_collector:collect_all_errors:46 - 📋 Phase 1: PyVRL syntax validation
2025-08-28T18:39:29.343384Z INFO     error_batch_collector:collect_all_errors:52 - 📋 Phase 2: Vector CLI validation
2025-08-28T18:39:29.357605Z INFO     error_batch_collector:collect_all_errors:75 - 📊 Collected 1 total errors
2025-08-28T18:39:29.357927Z INFO     error_batch_collector:collect_all_errors:79 -    other: 1 errors
2025-08-28T18:39:29.358023Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1337 - 📊 Collected 1 errors for batch fixing
2025-08-28T18:39:29.358087Z INFO     llm_iterative_session:iterate_with_feedback:713 - 🔄 Iterating VRL generation (iteration 2)
2025-08-28T18:39:29.358332Z DEBUG    llm_iterative_session:_save_conversation:1297 - 💾 Saved user message to .tmp/llm_sessions/llm_session_20250828_183834/iter2_user.txt
2025-08-28T18:39:29.358406Z DEBUG    llm_iterative_session:_call_llm:1019 - Adding 1.4s delay for iteration 2 to avoid rate limits
2025-08-28T18:39:30.758995Z INFO     llm_iterative_session:_call_llm:1022 - 📤 Calling anthropic API
2025-08-28T18:39:30.759544Z DEBUG    llm_iterative_session:_call_llm:1023 -    Prompt length: 465 chars
2025-08-28T18:40:32.532624Z INFO     llm_iterative_session:_call_llm:1038 - 📥 Response received in 61.8s (6394 chars)
2025-08-28T18:40:32.533086Z DEBUG    llm_iterative_session:_save_conversation:1297 - 💾 Saved assistant message to .tmp/llm_sessions/llm_session_20250828_183834/iter2_assistant.txt
2025-08-28T18:40:32.533155Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1263 - Testing iteration 2
2025-08-28T18:40:32.533223Z INFO     __main__:tracked_run:62 - 📍 Iteration 2 - LLM Call #2
2025-08-28T18:40:32.533286Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ============================================================
2025-08-28T18:40:32.533346Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - TESTING LLM-GENERATED VRL (Iteration 2)
2025-08-28T18:40:32.533397Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ============================================================
2025-08-28T18:40:32.533455Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - 
1. TESTING WITH PyVRL
2025-08-28T18:40:32.533506Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ----------------------------------------
2025-08-28T18:40:32.539549Z ERROR    vrl_testing_loop_clean:test_with_pyvrl:311 - ✗ PyVRL validation failed: 
error[E103]: unhandled fallible assignment
   ┌─ :36:23
   │
36 │         space_parts = split(rhost_section, " ")
   │         ------------- ^^^^^^^^^^^^^^^^^^^^^^^^^
   │         │             │
   │         │             this expression is fallible because at least one argument's type cannot be verified to be valid
   │         │             update the expression to be infallible by adding a `!`: `split!(rhost_section, " ")`
   │         │             `rhost_section` argument type is `string or null` and this function expected a parameter `value` of type `string`
   │         or change this to an infallible assignment:
   │         space_parts, err = split(rhost_section, " ")
   │
   = see documentation about error handling at https://errors.vrl.dev/#handling
   = see functions characteristics documentation at https://vrl.dev/expressions/#function-call-characteristics
   = learn more about error code 103 at https://errors.vrl.dev/103
   = see language documentation at https://vrl.dev
   = try your code in the VRL REPL, learn more at https://vrl.dev/examples

2025-08-28T18:40:32.539696Z INFO     vrl_testing_loop_clean:_log_with_timestamp:1111 - ❌ LLM VRL iteration 2 failed PyVRL validation
2025-08-28T18:40:32.539787Z INFO     error_batch_collector:collect_all_errors:46 - 📋 Phase 1: PyVRL syntax validation
2025-08-28T18:40:32.540003Z INFO     error_batch_collector:collect_all_errors:52 - 📋 Phase 2: Vector CLI validation
2025-08-28T18:40:32.550783Z INFO     error_batch_collector:collect_all_errors:75 - 📊 Collected 1 total errors
2025-08-28T18:40:32.551007Z INFO     error_batch_collector:collect_all_errors:79 -    other: 1 errors
2025-08-28T18:40:32.551068Z INFO     vrl_testing_loop_clean:run_automated_llm_generation:1337 - 📊 Collected 1 errors for batch fixing
2025-08-28T18:40:32.551129Z INFO     llm_iterative_session:iterate_with_feedback:713 - 🔄 Iterating VRL generation (iteration 3)
2025-08-28T18:40:32.551420Z DEBUG    llm_iterative_session:_save_conversation:1297 - 💾 Saved user message to .tmp/llm_sessions/llm_session_20250828_183834/iter3_user.txt
2025-08-28T18:40:32.551481Z DEBUG    llm_iterative_session:_call_llm:1019 - Adding 1.6s delay for iteration 3 to avoid rate limits
2025-08-28T18:40:34.151634Z INFO     llm_iterative_session:_call_llm:1022 - 📤 Calling anthropic API
2025-08-28T18:40:34.151961Z DEBUG    llm_iterative_session:_call_llm:1023 -    Prompt length: 465 chars
